[{"path":"https://hiddevandebeek.github.io/admr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 H. van de Beek Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hiddevandebeek.github.io/admr/articles/examplomycin.html","id":"creating-the-examplomycin-dataset","dir":"Articles","previous_headings":"","what":"Creating the examplomycin dataset","title":"examplomycin","text":"vignette create simulated dataset fictional drug called examplomycin. dataset contain 25 subjects 9 timepoints . data generated using two-compartment model first-order absorption elimination. model parameters sampled multivariate normal distribution specified covariance matrix. dataset also include random error term simulate measurement noise. make dataset available data object package use vignettes.","code":""},{"path":"https://hiddevandebeek.github.io/admr/articles/examplomycin.html","id":"libraries","dir":"Articles","previous_headings":"Creating the examplomycin dataset","what":"Libraries","title":"examplomycin","text":"use following libraries generate data plot results:","code":"library(rxode2) library(MASS) library(ggplot2) library(nlmixr2) library(data.table) library(dplyr) library(ggplot2) library(usethis)"},{"path":"https://hiddevandebeek.github.io/admr/articles/examplomycin.html","id":"data-generating-function","dir":"Articles","previous_headings":"Creating the examplomycin dataset","what":"Data generating function","title":"examplomycin","text":"function generates examplomycin dataset. takes three arguments: n (number subjects), times (vector timepoints), seed (random seed reproducibility). function first defines two-compartment model using RxODE function. generates model parameters sampling multivariate normal distribution specified covariance matrix. function also generates event table simulation, including single dose 100 units time 0 observations specified timepoints. model solved using rxSolve function, simulated data stored data frame. function returns simulated dataset.","code":"generate_data <- function(n, times, seed = 1) {   set.seed(seed)      mod <- RxODE({     # Parameters     ke = cl / v1             # Elimination rate constant     k12 = q / v1             # Rate constant for central to peripheral transfer     k21 = q / v2             # Rate constant for peripheral to central transfer          # Differential equations for drug amount in compartments     d/dt(depot)    = -ka * depot     d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral     d/dt(peripheral) = k12 * central - k21 * peripheral          # Concentration in the central compartment     cp = central / v1   })    # Generate covariates   theta <- c(cl=5, v1 = 10, v2 =30, q =10, ka = 1)    omegaCor <- matrix(c(1,  0,  0,  0,  0,                        0,  1,  0,  0,  0,                        0,  0,  1,  0,  0,                        0,  0,  0,  1,  0,                        0,  0,  0,  0,  1), dimnames=list(NULL,c(\"eta.cl\",\"eta.v1\",\"eta.v2\", \"eta.q\", \"eta.ka\")), nrow=5)    iiv.sd <- c(0.3, 0.3, 0.3, 0.3, 0.3) ## SDs of model parameters    iiv <- iiv.sd %*% t(iiv.sd)   omega <- iiv * omegaCor  # covariance matrix    mv <- mvrnorm(n, rep(0, dim(omega)[1]), omega)    params.all <-     data.table(       \"ID\" = seq(1:n),       \"cl\" = theta['cl'] * exp(mv[, 1]),       \"v1\" = theta['v1'] * exp(mv[, 2]),       \"v2\" = theta['v2'] * exp(mv[, 3]),       \"q\"  = theta['q']  * exp(mv[, 4]),       \"ka\" = theta['ka'] * exp(mv[, 5])     )    # Event table   ev <- et() %>%     et(amt = 100) %>%  # Add single dose     et(0) %>%  # Add initial time observation     et(times) %>%  # Sampling schedule     et(ID = seq(1, n)) %>%  # Assign unique IDs for all subjects     as.data.frame()    # Solve the model   sim <- rxSolve(mod, events = ev, iCov = params.all, cores = 0, addCov = T) %>%     mutate(ID = as.integer(id), TIME = as.numeric(time)) %>%     dplyr::select(-c(id, time)) %>%     mutate(AMT =  ifelse(TIME == 0, 100, 0)) %>%     mutate(EVID = ifelse(TIME == 0, 101, 0)) %>%     mutate(CMT = ifelse(TIME == 0, 1, 2))    # Simulate residual error and combine   sim$rv <- rnorm(nrow(sim), 0, 0.1)   sim$DV <- round(sim$cp * (1 + sim$rv), 3)   sim <- merge(sim, params.all)    dat <- sim %>%     dplyr::select(\"ID\", \"TIME\", \"DV\", \"AMT\", \"EVID\", \"CMT\")    return(dat) }"},{"path":"https://hiddevandebeek.github.io/admr/articles/examplomycin.html","id":"generating-the-examplomycin-dataset","dir":"Articles","previous_headings":"Creating the examplomycin dataset","what":"Generating the examplomycin dataset","title":"examplomycin","text":"now generate examplomycin dataset 25 subjects 9 timepoints . use random seed 1 reproducibility.","code":"examplomycin <- generate_data(n = 25, times = c(0.5, 1, 2, 3, 4, 6, 8, 12, 24), seed = 1) ## using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ head(examplomycin) ##   ID TIME    DV AMT EVID CMT ## 1  3  0.0 0.000 100  101   1 ## 2  3  0.5 2.613   0    0   2 ## 3  3  1.0 2.863   0    0   2 ## 4  3  2.0 3.328   0    0   2 ## 5  3  3.0 1.860   0    0   2 ## 6  3  4.0 1.563   0    0   2"},{"path":"https://hiddevandebeek.github.io/admr/articles/examplomycin.html","id":"plotting-the-examplomycin-dataset","dir":"Articles","previous_headings":"Creating the examplomycin dataset","what":"Plotting the examplomycin dataset","title":"examplomycin","text":"now create concentration-time plot examplomycin dataset. line represents different subject, points represent observed concentrations timepoint. color lines corresponds subject ID.","code":"# Basic concentration-time plot ggplot(examplomycin, aes(x = TIME, y = DV, color = factor(ID))) +   geom_line(alpha = 0.7) +    # Lines connecting points   geom_point(size = 2, alpha = 0.8) +  # Points for observations   scale_color_viridis_d(name = \"Subject ID\") +  # Color by subject ID   labs(     title = \"Concentration-Time Profile\",     x = \"Time (hours)\",     y = \"Observed Concentration (DV)\"   ) + # y log scale   theme_minimal() +   theme(legend.position = \"none\")  # Hide legend if too many subjects"},{"path":"https://hiddevandebeek.github.io/admr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"H. van de Beek. Maintainer.","code":""},{"path":"https://hiddevandebeek.github.io/admr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van de Beek H, Välitalo P, Zwep L, van Hasselt J (2025). admr: Aggregate data modelling R. R package version 0.1.0, https://hiddevandebeek.github.io/admr/, https://hiddevandebeek.github.io/admr.","code":"@Manual{,   title = {admr: Aggregate data modelling in R},   author = {H. {van de Beek} and P.A.J. Välitalo and L.B. Zwep and J.G.C {van Hasselt}},   year = {2025},   note = {R package version 0.1.0, https://hiddevandebeek.github.io/admr/},   url = {https://hiddevandebeek.github.io/admr}, }"},{"path":"https://hiddevandebeek.github.io/admr/index.html","id":"admr-aggregate-data-modeling-in-r","dir":"","previous_headings":"","what":"Aggregate data modelling in R","title":"Aggregate data modelling in R","text":"admr (Aggregate Data Modeling R) open-source R package designed facilitate pharmacometric modeling using summary-level data. enables users work aggregate data, mean observations variance-covariance matrices, fit pharmacokinetic pharmacodynamic (PK/PD) models efficiently. package implements newly developed Expectation-Maximization (EM) algorithm enhance computational performance provides tools advanced modeling applications. Features Expectation-Maximization Algorithm: Efficiently fits pharmacometric models aggregate data, improving speed scalability compared Monte Carlo methods. Aggregate Data Flexibility: Allows integration summary-level data diverse sources, including published literature simulated models. Meta-Analysis Support: Facilitates model-based meta-analyses enabling combination summary data across studies. R Integration: Fully compatible R, leveraging popular pharmacometric modeling libraries like rxode2. Open-Source: Developed accessibility ease use pharmacometric community.","code":""},{"path":"https://hiddevandebeek.github.io/admr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Aggregate data modelling in R","text":"R package. R required, RStudio recommended. can install development version admr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"hiddevandebeek/admr\")"},{"path":"https://hiddevandebeek.github.io/admr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Aggregate data modelling in R","text":"basic example use admr fit pharmacokinetic model aggregate data:","code":"library(admr) ## basic example code"},{"path":"https://hiddevandebeek.github.io/admr/reference/admr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admr: Aggregate data modelling in R — admr-package","title":"admr: Aggregate data modelling in R — admr-package","text":"novel method aggregate data model using non-linear estimation techniques.","code":""},{"path":[]},{"path":"https://hiddevandebeek.github.io/admr/reference/admr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admr: Aggregate data modelling in R — admr-package","text":"H. van de Beek P..J. Välitalo","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/fitEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting aggregate data — fitEM","title":"Fitting aggregate data — fitEM","text":"fitEM() implements Expectation-Maximization(EM) algorithm parameter estimation given aggregate data model, iterating maximum likelihood updates weighted MC updates. version function uses nloptr instead optimx. TOL = 1e-10","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/fitEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting aggregate data — fitEM","text":"","code":"fitEM(   p0,   opts,   obs,   maxiter = 100,   convcrit_nll = 1e-05,   nomap = TRUE,   phase_fractions = c(0.2, 0.4, 0.2, 0.2),   max_worse_iterations = 10,   chains = 1,   pertubation = 0.1 )"},{"path":"https://hiddevandebeek.github.io/admr/reference/fitEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting aggregate data — fitEM","text":"p0 initial parameter values opts options obs observed data maxiter maximum number iterations convcrit_nll convergence criterion negative log-likelihood nomap single model multiple models phase_fractions vector phase fractions max_worse_iterations maximum number consecutive worse iterations skipping phase chains number chains pertubation pertubation factor initial parameter values chain","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/fitEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting aggregate data — fitEM","text":"fitted model","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/fitEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting aggregate data — fitEM","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/gendataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a dataset — gendataset","title":"Generate a dataset — gendataset","text":"gendataset() generates dataset based model structure random effects, optional residual error.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/gendataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a dataset — gendataset","text":"","code":"gendataset(opts, seed = 1, reserr = TRUE, nlmixrform = FALSE)"},{"path":"https://hiddevandebeek.github.io/admr/reference/gendataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a dataset — gendataset","text":"opts list options seed seed random number generator reserr logical indicating whether residual error added nlmixrform logical indicating whether dataset nlmixr format","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/gendataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a dataset — gendataset","text":"dataset","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/gendataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a dataset — gendataset","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/genfitfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a fitting function for optimization — genfitfunc","title":"Generate a fitting function for optimization — genfitfunc","text":"genfitfunc() generates fitting function optimization, taking observed data model options inputs.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genfitfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a fitting function for optimization — genfitfunc","text":"","code":"genfitfunc(opts, obs)"},{"path":"https://hiddevandebeek.github.io/admr/reference/genfitfunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a fitting function for optimization — genfitfunc","text":"opts model options obs observed data","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genfitfunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a fitting function for optimization — genfitfunc","text":"fitting function","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genfitfunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a fitting function for optimization — genfitfunc","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/genopts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate options for optimization — genopts","title":"Generate options for optimization — genopts","text":"genopts() initializes generates core options settings modeling optimization, including random effects, simulation settings, likelihood approximations.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genopts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate options for optimization — genopts","text":"","code":"genopts(   f,   g,   xt,   p,   h,   nsim = 1,   n = 30,   adist = NULL,   interact = TRUE,   fo_appr = (nsim < 10),   biseq = NA,   omega_expansion = 1,   p_thetai = NA,   single_betas = NA )"},{"path":"https://hiddevandebeek.github.io/admr/reference/genopts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate options for optimization — genopts","text":"f likelihood function g model function xt data p parameter settings h error function nsim number simulations n number simulations adist distribution random effects interact Whether include interaction terms fo_appr Whether use first-order approximation biseq sequence random effects omega_expansion expansion factor omega matrix p_thetai theta matrix single_betas beta matrix","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genopts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate options for optimization — genopts","text":"fitted model","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/genopts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate options for optimization — genopts","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/meancov.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate options for optimization — meancov","title":"Generate options for optimization — meancov","text":"meancov() computes mean covariance matrix, optionally weights.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/meancov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate options for optimization — meancov","text":"","code":"meancov(m, wt)"},{"path":"https://hiddevandebeek.github.io/admr/reference/meancov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate options for optimization — meancov","text":"m matrix wt weights","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/meancov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate options for optimization — meancov","text":"list mean covariance","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/meancov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate options for optimization — meancov","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/p_to_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters to optimizable form — p_to_optim","title":"Parameters to optimizable form — p_to_optim","text":"p_to_optim() Converts parameter list form can optimized, returning transformed values, back-transformation functions, derivatives.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/p_to_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters to optimizable form — p_to_optim","text":"","code":"p_to_optim(p)"},{"path":"https://hiddevandebeek.github.io/admr/reference/p_to_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters to optimizable form — p_to_optim","text":"p parameter list","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/p_to_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters to optimizable form — p_to_optim","text":"optimized parameter list","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/p_to_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters to optimizable form — p_to_optim","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/plot.fitEM_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics of fitEM results — plot.fitEM_result","title":"Plot diagnostics of fitEM results — plot.fitEM_result","text":"Plot diagnostics fitEM results","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/plot.fitEM_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics of fitEM results — plot.fitEM_result","text":"","code":"# S3 method for class 'fitEM_result' plot(x, ...)"},{"path":"https://hiddevandebeek.github.io/admr/reference/plot.fitEM_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics of fitEM results — plot.fitEM_result","text":"x fitted model object returned fitEM ... Additional arguments (used)","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/print.fitEM_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print fitEM results — print.fitEM_result","title":"Print fitEM results — print.fitEM_result","text":"Print fitEM results","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/print.fitEM_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print fitEM results — print.fitEM_result","text":"","code":"# S3 method for class 'fitEM_result' print(x, ...)"},{"path":"https://hiddevandebeek.github.io/admr/reference/print.fitEM_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print fitEM results — print.fitEM_result","text":"x fitted model object returned fitEM ... Additional arguments (used)","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting aggregate data — timedEM","title":"Fitting aggregate data — timedEM","text":"timedEM() implements Expectation-Maximization(EM) algorithm parameter estimation given aggregate data model, iterating maximum likelihood updates weighted MC updates. used compare performance old new implementation aggregate data modelling.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting aggregate data — timedEM","text":"","code":"timedEM(p0, opts, obs, maxiter = 100, convcrit_nll = 5e-04, nomap = TRUE)"},{"path":"https://hiddevandebeek.github.io/admr/reference/timedEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting aggregate data — timedEM","text":"p0 initial parameter values opts options obs observed data maxiter maximum number iterations convcrit_nll convergence criterion negative log-likelihood nomap single model multiple models","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting aggregate data — timedEM","text":"fitted model","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting aggregate data — timedEM","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/reference/timedbobyqa.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting aggregate data — timedbobyqa","title":"Fitting aggregate data — timedbobyqa","text":"timedbobyqa() implements bobqa algorithm parameter estimation given aggregate data model, iterating maximum likelihood updates MC updates. iteration creates new MC samples updates parameter values. used compare performance old new implementation aggregate data modelling.","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedbobyqa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting aggregate data — timedbobyqa","text":"","code":"timedbobyqa(p0, opts, obs)"},{"path":"https://hiddevandebeek.github.io/admr/reference/timedbobyqa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting aggregate data — timedbobyqa","text":"p0 initial parameter values opts options obs observed data","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedbobyqa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting aggregate data — timedbobyqa","text":"fitted model","code":""},{"path":"https://hiddevandebeek.github.io/admr/reference/timedbobyqa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting aggregate data — timedbobyqa","text":"","code":"#test"},{"path":"https://hiddevandebeek.github.io/admr/news/index.html","id":"admr-010","dir":"Changelog","previous_headings":"","what":"admr 0.1.0","title":"admr 0.1.0","text":"Initial CRAN submission.","code":""}]

[{"path":"https://vanhasseltlab.github.io/admr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 H. van de Beek Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"introduction-to-aggregate-data-modeling-with-admr","dir":"Articles","previous_headings":"","what":"Introduction to Aggregate Data Modeling with admr","title":"Get started with admr","text":"vignette provides comprehensive introduction using admr package aggregate data modeling population pharmacokinetics. ’ll cover basic concepts, data preparation, model specification, make link advanced features.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"what-is-aggregate-data-modeling","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"What is Aggregate Data Modeling?","title":"Get started with admr","text":"Aggregate data modeling new approach pharmacometrics allows work summary-level data instead individual-level observations. particularly useful : Individual-level data available (e.g., published literature) need combine data multiple studies want perform meta-analyses ’re working simulated data want reduce computational burden admr package implements Iterative Reweighting Monte Carlo (IRMC) algorithm, efficiently fits models aggregate data iteratively updating parameter estimates using weighted importance sampling. efficient traditional Monte Carlo methods.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Required Packages","title":"Get started with admr","text":"first step load necessary packages:","code":"library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm) library(ggplot2)  # For visualization library(randtoolbox) library(units)"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"understanding-the-data-format","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Understanding the Data Format","title":"Get started with admr","text":"admr package works two types data formats: Raw Data: Individual-level observations wide long format. Aggregate Data: Summary statistics (mean covariance) computed raw data. Aggregate Data means variance: Mean variance time point (covariances). vignette Variance-based modelling provides details third option. Let’s look examplomycin dataset, ’ll use throughout vignette:","code":"# Load the dataset data(examplomycin) head(examplomycin) ##    ID TIME    DV AMT EVID CMT ## 1 460 0.00 0.000 100  101   1 ## 2 460 0.10 0.752   0    0   2 ## 3 460 0.25 1.932   0    0   2 ## 4 460 0.50 3.694   0    0   2 ## 5 460 1.00 3.479   0    0   2 ## 6 460 2.00 4.003   0    0   2 # Basic dataset information cat(\"Number of subjects:\", length(unique(examplomycin$ID)), \"\\n\") ## Number of subjects: 500 cat(\"Number of time points:\", length(unique(examplomycin$TIME)), \"\\n\") ## Number of time points: 10 cat(\"Time points:\", paste(sort(unique(examplomycin$TIME)), collapse = \", \"), \"\\n\") ## Time points: 0, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 12"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"converting-raw-data-to-aggregate-format","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Data Preparation","what":"Converting Raw Data to Aggregate Format","title":"Get started with admr","text":"first step convert simulated raw data aggregate format. real-world scenarios, might extract summary statistics published studies, depending available information. example, ’ll compute mean covariance examplomycin dataset. ’s : aggregated data now contains mean concentrations covariance matrix time point. raw data, can use meancov function compute statistics. However, extracting data literature, may need manually input means covariances based reported values. standard deviations available, can construct diagonal covariance matrix.","code":"# Convert to wide format examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%  # Remove dosing events   dplyr::select(ID, TIME, DV) %>%  # Select relevant columns   pivot_wider(names_from = TIME, values_from = DV) %>%  # Convert to wide format   dplyr::select(-c(1))  # Remove ID column  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Compute mean and covariance  # View the structure of aggregated data str(examplomycin_aggregated) ## List of 2 ##  $ E: Named num [1:9] 0.966 1.939 2.788 3.025 2.258 ... ##   ..- attr(*, \"names\")= chr [1:9] \"0.1\" \"0.25\" \"0.5\" \"1\" ... ##  $ V: num [1:9, 1:9] 0.2103 0.3078 0.3486 0.2026 0.0224 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:9] \"0.1\" \"0.25\" \"0.5\" \"1\" ... ##   .. ..$ : chr [1:9] \"0.1\" \"0.25\" \"0.5\" \"1\" ..."},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"visualizing-the-data","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Data Preparation","what":"Visualizing the Data","title":"Get started with admr","text":"fitting model, ’s helpful visualize aggregate data:  plot doesn’t show covariance time points, gives idea variability concentrations time point.","code":"# Boxplot to visualize variability ggplot(examplomycin, aes(x = TIME, y = DV, group = TIME)) +   geom_boxplot(aes(group = TIME), width = 0.2) +   labs(     title = \"Concentration Variability at Each Time Point\",     x = \"Time (hours)\",     y = \"Concentration (mg/L)\"   ) +   theme_minimal()"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"defining-the-pharmacokinetic-model","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Specification","what":"Defining the Pharmacokinetic Model","title":"Get started with admr","text":"’ll use two-compartment model first-order absorption. two ways specify : Using differential equations: Using solved model approach (simpler): models identical terms pharmacokinetic behavior. second approach solved model, faster execution. stage package development, important parameters order specified genopts function later.","code":"rxModel <- function(){   model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer      # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral      # Concentration in central compartment   cp = central / v1   }) }  rxModel <- rxode2(rxModel) rxModel <- rxModel$simulationModel # Define RxODE model rxModel <- function(){   model({     cp = linCmt(       cl,           # Clearance       v1,           # Volume of central compartment       v2,           # Volume of peripheral compartment       q,            # Inter-compartmental clearance       ka            # Absorption rate constant     )}) }  rxModel <- rxode2(rxModel) rxModel <- rxModel$simulationModel"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"creating-the-prediction-function","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Specification","what":"Creating the Prediction Function","title":"Get started with admr","text":"prediction function crucial admr package. : - Constructs event table dosing sampling - Solves rxode2 model - Returns predicted concentrations required format function admr use generate predictions based model parameters. user can specify dose amount, number doses dosing interval eventTable function. Furthermore, rxSolve function can parallelized setting cores argument value greater 1, can significantly speed computations large datasets complex models.","code":"rxode2::rxSetSilentErr(1) # does not print iteration messages in vignette ## [1] TRUE predder <- function(time, theta_i, dose = 100) {     n_individuals <- nrow(theta_i)          if (is.null(n_individuals)) {       n_individuals <- 1     }      # Create event table     ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")     ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)     ev$add.sampling(time)          # Solve model     out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)          # Format output     cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                          byrow = TRUE)          return(cp_matrix) }"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"setting-up-model-options","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Fitting","what":"Setting Up Model Options","title":"Get started with admr","text":"genopts function creates options object controls model fitting process: opts object: time: Specifies observation times p: Contains initial estimates population parameters (beta), -subject variability (Omega), residual error (Sigma_prop) nsim: Number Monte Carlo samples use fitting process n: Number individuals simulate fo_appr: Whether use first-order approximation omega_expansion: factor expand covariance matrix estimation, can help convergence f: prediction function defined earlier","code":"opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),  # Observation times   p = list(     beta = c(cl = 4, v1 = 12, v2 = 25, q = 12, ka = 1.2),  # Population parameters     Omega = matrix(c(0.09, 0, 0, 0, 0,                      0, 0.09, 0, 0, 0,                      0, 0, 0.09, 0, 0,                      0, 0, 0, 0.09, 0,                      0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),  # Random effects     Sigma_prop = 0.04  # Proportional error   ),   nsim = 10000,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = F,  # Disable first-order approximation used in lower nsim   omega_expansion = 1,  # Omega expansion factor   f = predder    # Prediction function we defined earlier )"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Fitting","what":"Fitting the Model","title":"Get started with admr","text":"fitMC function fits model using traditional MC algorithm: fitIRMC function fits model using IRMC algorithm, efficient aggregate data:","code":"fit.admrMC <- fitMC(   opts = opts,   obs = examplomycin_aggregated,   chains = 1,  # Number of chains   maxiter = 2000  # Maximum iterations ) ## Iteration: 50 - NLL: -1794.163  ## Iteration: 100 - NLL: -1838.441  ## Iteration: 150 - NLL: -1843.893  ## Iteration: 200 - NLL: -1844.324  ## Iteration: 250 - NLL: -1844.5  ## Iteration: 300 - NLL: -1844.797  ## Iteration: 350 - NLL: -1844.856  ## Iteration: 400 - NLL: -1844.982  ## Iteration: 450 - NLL: -1845.047  ## Iteration: 500 - NLL: -1845.091  ## Iteration: 550 - NLL: -1845.144  ## Iteration: 600 - NLL: -1845.174  ## Iteration: 650 - NLL: -1845.241  ## Iteration: 700 - NLL: -1845.28  ## Iteration: 750 - NLL: -1845.318  ## Iteration: 800 - NLL: -1845.343  ## Iteration: 850 - NLL: -1845.351  ## Iteration: 900 - NLL: -1845.353  ## Iteration: 950 - NLL: -1845.356  ## Iteration: 1000 - NLL: -1845.357  ## Iteration: 1050 - NLL: -1845.357  ## Iteration: 1100 - NLL: -1845.357  ##  ## Chain 1 Complete: Final NLL = -1845.357, Time Elapsed = 144.43 seconds ## fit.admr <- admr::fitIRMC(   opts = opts,   obs = examplomycin_aggregated,   chains = 1,  # Number of chains   maxiter = 200  # Maximum iterations ) ## Chain 1: ## Iter | NLL and Parameters (11 values) ## -------------------------------------------------------------------------------- ##    1: -1587.397    1.386    2.485    3.219    2.485    0.182   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 ##  ## ### Wide Search Phase ### ##    2: -1844.304    1.605    2.273    3.425    2.276   -0.014   -2.201   -2.213   -2.203   -2.270   -2.417   -3.236 ##    3: -1845.353    1.601    2.315    3.402    2.285    0.024   -2.284   -2.213   -2.346   -2.238   -2.389   -3.235 ##    4: -1845.354    1.601    2.316    3.402    2.285    0.025   -2.282   -2.214   -2.338   -2.238   -2.391   -3.235 ##    5: -1845.354    1.601    2.317    3.401    2.285    0.026   -2.282   -2.214   -2.339   -2.237   -2.391   -3.235 ##    6: -1845.354    1.601    2.317    3.401    2.285    0.026   -2.282   -2.214   -2.339   -2.236   -2.391   -3.235 ##    7: -1845.354    1.601    2.317    3.401    2.285    0.026   -2.282   -2.214   -2.339   -2.236   -2.391   -3.235 ##    8: -1845.354    1.601    2.317    3.401    2.285    0.026   -2.282   -2.215   -2.339   -2.236   -2.391   -3.235 ##    9: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.215   -2.339   -2.236   -2.390   -3.235 ##   10: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.215   -2.339   -2.236   -2.390   -3.235 ##   11: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.215   -2.339   -2.236   -2.390   -3.235 ## Phase Wide Search Phase converged at iteration 11. ##  ## ### Focussed Search Phase ### ##   12: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   13: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   14: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Focussed Search Phase converged at iteration 14. ##  ## ### Fine-Tuning Phase ### ##   15: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.215   -2.339   -2.236   -2.390   -3.235 ##   16: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   17: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Fine-Tuning Phase converged at iteration 17. ##  ## ### Precision Phase ### ##   18: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.215   -2.339   -2.236   -2.390   -3.235 ##   19: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   20: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Precision Phase converged at iteration 20. ##  ## Chain 1 Complete: Final NLL = -1845.354, Time Elapsed = 21.96 seconds ##"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"basic-diagnostics","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Basic Diagnostics","title":"Get started with admr","text":"print method provides summary model fit:","code":"print(fit.admrMC) ## -- FitIRMC Summary -- ##  ## -- Objective Function and Information Criteria -- ##  Log-likelihood: -1845.3569 ##             AIC: 3701.71 ##             BIC: 3759.07 ## Condition#(Cov): 152.21 ## Condition#(Cor): 216.94 ##  ## -- Timing Information -- ##      Best Chain: 144.4301 seconds ##      All Chains: 144.4327 seconds ##      Covariance: 23.5921 seconds ##         Elapsed: 168.02 seconds ##  ## -- Population Parameters -- ## # A tibble: 6 × 6 ##   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` ##   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> ## 1 cl             1.60    0.0152   0.951 4.96 (4.81, 5.11)               31.9 ## 2 v1             2.32    0.0865   3.74  10.13 (8.55, 12.00)             32.9 ## 3 v2             3.40    0.0400   1.18  30.02 (27.75, 32.47)            31.1 ## 4 q              2.28    0.0212   0.927 9.82 (9.43, 10.24)              32.5 ## 5 ka             0.0246  0.0817 332.    1.02 (0.87, 1.20)               30.4 ## 6 Residual Error 0.0394 NA       NA     0.0394                          NA   ##  ## -- Iteration Diagnostics -- ##  Iter | NLL and Parameters ## -------------------------------------------------------------------------------- ##    1: -1587.397 1.386 2.485 3.219 2.485 0.182 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    2: -1587.397 1.386 2.485 3.219 2.485 0.182 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    3: -1587.397 1.386 2.485 3.219 2.485 0.182 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    4: 3891.995 2.386 2.485 3.219 2.485 0.182 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    5: 5635.833 1.386 3.485 3.219 2.485 0.182 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    ... (omitted iterations) ... ## 1103: -1845.357 1.601 2.315 3.402 2.285 0.025 -2.284 -2.225 -2.336 -2.248 -2.381 -3.235 ## 1104: -1845.357 1.601 2.315 3.402 2.285 0.025 -2.284 -2.225 -2.336 -2.248 -2.381 -3.235 ## 1105: -1845.357 1.601 2.315 3.402 2.285 0.025 -2.284 -2.224 -2.336 -2.248 -2.381 -3.235 ## 1106: -1845.357 1.601 2.315 3.402 2.285 0.025 -2.284 -2.225 -2.336 -2.248 -2.381 -3.235 ## 1107: -1845.357 1.601 2.315 3.402 2.285 0.025 -2.284 -2.225 -2.336 -2.248 -2.381 -3.235"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"convergence-assessment","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Convergence Assessment","title":"Get started with admr","text":"plot method visualizes convergence model fit:  Observed vs Predicted plot shows well model predictions align observed aggregate data. show good fit data, means variability well captured. However, let’s examine parameter estimates detailed assessment. predicted means variance-covariance show good resemblance observed data, indicating model capturing underlying pharmacokinetic behavior effectively.","code":"plot(fit.admr)"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Parameter Estimates","title":"Get started with admr","text":"Let’s examine parameter estimates: dataset, estimated parameters close true values used simulation, indicating successful model fit using summary statistics. However, small discrepancies can occur due stochastic nature Monte Carlo sampling limited number samples. Therefore, ’ll assess overall dynamics model dosing simulation.","code":"# Extract parameter estimates params <- fit.admr$transformed_params cat(\"Final parameter estimates:\\n\") ## Final parameter estimates: print(params) ## $beta ##        cl        v1        v2         q        ka  ##  4.958119 10.137560 30.015534  9.825725  1.025799  ##  ## $Omega ##          [,1]      [,2]       [,3]      [,4]       [,5] ## [1,] 0.102066 0.0000000 0.00000000 0.0000000 0.00000000 ## [2,] 0.000000 0.1093049 0.00000000 0.0000000 0.00000000 ## [3,] 0.000000 0.0000000 0.09656286 0.0000000 0.00000000 ## [4,] 0.000000 0.0000000 0.00000000 0.1066416 0.00000000 ## [5,] 0.000000 0.0000000 0.00000000 0.0000000 0.09155175 ##  ## $Sigma_prop ## [1] 0.03936103 params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 )  cat(\"True parameter values:\\n\") ## True parameter values: print(params.true) ## $beta ## cl v1 v2  q ka  ##  5 10 30 10  1  ##  ## $Omega ##      [,1] [,2] [,3] [,4] [,5] ## [1,] 0.09 0.00 0.00 0.00 0.00 ## [2,] 0.00 0.09 0.00 0.00 0.00 ## [3,] 0.00 0.00 0.09 0.00 0.00 ## [4,] 0.00 0.00 0.00 0.09 0.00 ## [5,] 0.00 0.00 0.00 0.00 0.09 ##  ## $Sigma_prop ## [1] 0.04"},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"dosing-plot-with-confidence-intervals-for-true-vs-estimated-parameters","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Dosing plot with Confidence Intervals for true vs estimated parameters","title":"Get started with admr","text":"First, let’s specify two models: one true parameters another estimated parameters fit.admr object. Now, let’s simulate models dosing regimen plot results confidence intervals:  can see model estimated parameters closely follows dynamics model true parameters, indicating admr package can effectively recover population parameters aggregate data. small differences 95% population associated confidence intervals, showing slight overestimation random effects. However, overall dynamics well captured.","code":"params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 ) params <- fit.admr$transformed_params  rxModel_true <- function(){   ini({     cl <- params.true$beta[\"cl\"]  # Clearance     v1 <- params.true$beta[\"v1\"]  # Volume of central compartment     v2 <- params.true$beta[\"v2\"] # Volume of peripheral compartment     q <- params.true$beta[\"q\"]    # Inter-compartmental clearance     ka <- params.true$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params.true$Omega[1,1]     eta_v1 ~ params.true$Omega[2,2]     eta_v2 ~ params.true$Omega[3,3]     eta_q ~ params.true$Omega[4,4]     eta_ka ~ params.true$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) }  rxModel_covar <- function(){   ini({     cl <- params$beta[\"cl\"]  # Clearance     v1 <- params$beta[\"v1\"]  # Volume of central compartment     v2 <- params$beta[\"v2\"] # Volume of peripheral compartment     q <- params$beta[\"q\"]    # Inter-compartmental clearance     ka <- params$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params$Omega[1,1]     eta_v1 ~ params$Omega[2,2]     eta_v2 ~ params$Omega[3,3]     eta_q ~ params$Omega[4,4]     eta_ka ~ params$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) }  rxModel_true <- rxode2(rxModel_true()) rxModel_true <- rxModel_true$simulationModel ## using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ rxModel_covar <- rxode2(rxModel_covar()) rxModel_covar <- rxModel_covar$simulationModel time_points <- seq(0, 12, by = 0.1)  # Dense time points for smooth curves ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") ev$add.dosing(dose = 100, nbr.doses = 2, dosing.interval = 6) ev$add.sampling(time_points)  sim_true <- rxSolve(rxModel_true, events = ev, cores = 0, nSub = 10000) sim_covar <- rxSolve(rxModel_covar, events = ev, cores = 0, nSub = 10000)  # Combine the confidence intervals with a label for the model ci_true <- as.data.frame(confint(sim_true, \"cp\", level=0.95)) %>%   mutate(Model = \"True parameters\") ## summarizing data...done ci_covar <- as.data.frame(confint(sim_covar, \"cp\", level=0.95)) %>%   mutate(Model = \"Estimated model\") ## summarizing data...done # Bind them together ci_all <- bind_rows(ci_true, ci_covar) %>%   mutate(     p1 = as.numeric(as.character(p1)),     Percentile = factor(Percentile, levels = unique(Percentile[order(p1)]))   )  # Plot both models ggplot(ci_all, aes(x = time, group = interaction(Model, Percentile))) +   geom_ribbon(aes(ymin = p2.5, ymax = p97.5, fill = Model),               alpha = 0.2, colour = NA) +   geom_line(aes(y = p50, colour = Model), size = 0.8) +   labs(     title = \"Central Concentration Simulations\",     x = \"Time\",     y = \"Central Concentration (mg/L)\"   ) +   theme_bw(base_size = 14) +   scale_colour_manual(values = c(\"True parameters\" = \"blue\",                                  \"Estimated model\" = \"red\")) +   scale_fill_manual(values = c(\"True parameters\" = \"blue\",                                \"Estimated model\" = \"red\")) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"best-practices","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Best Practices","title":"Get started with admr","text":"Always check data missing values outliers Ensure time points consistent across subjects Consider impact dosing events analysis Start simple model gradually add complexity Use meaningful initial values parameters Consider parameter transformations better estimation Use multiple chains improve optimization Monitor convergence carefully Check parameter estimates biological plausibility Always examine convergence plots Validate model predictions observed data","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/admr.html","id":"next-steps","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Next Steps","title":"Get started with admr","text":"mastering basics, might want explore: Adjusting Monte Carlo sample size Residual analysis Parameter initial sensitivity analysis Model comparison information, see package documentation vignettes.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"creating-the-examplomycin-dataset","dir":"Articles","previous_headings":"","what":"Creating the Examplomycin Dataset","title":"Examplomycin dataset: a pharmacokinetic example","text":"vignette demonstrates create simulated pharmacokinetic dataset fictional drug called examplomycin. dataset designed showcase capabilities admr package aggregate data modeling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"overview","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Overview","title":"Examplomycin dataset: a pharmacokinetic example","text":"examplomycin dataset simulated pharmacokinetic study following characteristics: - 500 healthy subjects - Single oral dose 100 mg - 9 sampling time points per subject - Two-compartment model first-order absorption - Random effects parameters - Proportional residual error","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"required-packages","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Required Packages","title":"Examplomycin dataset: a pharmacokinetic example","text":"necessary R packages data generation manipulation loaded :","code":"library(rxode2) library(MASS) library(ggplot2) library(nlmixr2) library(data.table) library(dplyr) library(ggplot2) library(usethis) library(units)"},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"data-generation-function","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Data Generation Function","title":"Examplomycin dataset: a pharmacokinetic example","text":"generate_data function creates examplomycin dataset following features: Two-compartment model first-order absorption Log-normal random effects parameters Proportional residual error Standardized sampling schedule nlmixr2-compatible data format","code":"generate_data <- function(n, times, seed = 1) {   set.seed(seed)      # Define the pharmacokinetic model   mod <- function(){     model({     # Parameters     ke = cl / v1             # Elimination rate constant     k12 = q / v1             # Rate constant for central to peripheral transfer     k21 = q / v2             # Rate constant for peripheral to central transfer          # Differential equations for drug amount in compartments     d/dt(depot)    = -ka * depot     d/dt(central)  = ka * depot - ke * central -        k12 * central +        k21 * peripheral     d/dt(peripheral) = k12 * central -        k21 * peripheral          # Concentration in the central compartment     cp = central / v1     })    }      mod <- rxode2(mod)   mod <- mod$simulationModel    # Population parameters   theta <- c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1)    # Correlation matrix for random effects   omegaCor <- matrix(c(1,  0,  0,  0,  0,                        0,  1,  0,  0,  0,                        0,  0,  1,  0,  0,                        0,  0,  0,  1,  0,                        0,  0,  0,  0,  1),                       dimnames = list(NULL, c(\"eta.cl\", \"eta.v1\", \"eta.v2\", \"eta.q\",                                             \"eta.ka\")), nrow = 5)    # Standard deviations of random effects   iiv.sd <- c(0.3, 0.3, 0.3, 0.3, 0.3)    # Create covariance matrix   iiv <- iiv.sd %*% t(iiv.sd)   omega <- iiv * omegaCor    # Generate random effects   mv <- mvrnorm(n, rep(0, dim(omega)[1]), omega)    # Create individual parameters   params.all <-     data.table(       \"ID\" = seq(1:n),       \"cl\" = theta['cl'] * exp(mv[, 1]),       \"v1\" = theta['v1'] * exp(mv[, 2]),       \"v2\" = theta['v2'] * exp(mv[, 3]),       \"q\"  = theta['q']  * exp(mv[, 4]),       \"ka\" = theta['ka'] * exp(mv[, 5])     )    # Create event table   ev <- et() %>%     et(amt = 100) %>%  # Single dose     et(0) %>%  # Initial time point     et(times) %>%  # Sampling schedule     et(ID = seq(1, n)) %>%  # Subject IDs     as.data.frame()    # Solve the model   sim <- rxSolve(mod, events = ev, iCov = params.all, cores = 0, addCov = T) %>%     mutate(ID = as.integer(id), TIME = as.numeric(time)) %>%     dplyr::select(-c(id, time)) %>%     mutate(AMT = ifelse(TIME == 0, 100, 0)) %>%     mutate(EVID = ifelse(TIME == 0, 101, 0)) %>%     mutate(CMT = ifelse(TIME == 0, 1, 2))    # Add residual error   sim$rv <- rnorm(nrow(sim), 0, 0.2)   sim$DV <- round(sim$cp * (1 + sim$rv), 3)   sim <- merge(sim, params.all)    # Select final columns   dat <- sim %>%     dplyr::select(\"ID\", \"TIME\", \"DV\", \"AMT\", \"EVID\", \"CMT\")    return(dat) }"},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"generating-the-dataset","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Generating the Dataset","title":"Examplomycin dataset: a pharmacokinetic example","text":"’ll generate examplomycin dataset : - 500 subjects - 9 time points (0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 12 hours) - Random seed reproducibility","code":"examplomycin <- generate_data(   n = 500,  # Number of subjects   times = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),  # Sampling times   seed = 1  # Random seed ) ## ℹ parameter labels from comments are typically ignored in non-interactive mode ## ℹ Need to run with the source intact to parse comments head(examplomycin) ##    ID TIME    DV AMT EVID CMT ## 1 460 0.00 0.000 100  101   1 ## 2 460 0.10 0.752   0    0   2 ## 3 460 0.25 1.932   0    0   2 ## 4 460 0.50 3.694   0    0   2 ## 5 460 1.00 3.479   0    0   2 ## 6 460 2.00 4.003   0    0   2"},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"saving-the-dataset","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Saving the Dataset","title":"Examplomycin dataset: a pharmacokinetic example","text":"dataset saved package data object use vignettes examples:","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"visualizing-the-dataset","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Visualizing the Dataset","title":"Examplomycin dataset: a pharmacokinetic example","text":"’ll create concentration-time plot visualize simulated data:","code":"# Create concentration-time plot ggplot(examplomycin, aes(x = TIME, y = DV, color = factor(ID))) +   geom_line(alpha = 0.7) +    # Connect points with lines   geom_point(size = 2, alpha = 0.8) +  # Add observation points   scale_color_viridis_d(name = \"Subject ID\") +  # Color by subject   labs(     title = \"Concentration-Time Profile\",     x = \"Time (hours)\",     y = \"Observed Concentration (DV)\"   ) +   theme_minimal() +   theme(legend.position = \"none\")  # Hide legend for clarity"},{"path":"https://vanhasseltlab.github.io/admr/articles/examplomycin.html","id":"dataset-structure","dir":"Articles","previous_headings":"Creating the Examplomycin Dataset","what":"Dataset Structure","title":"Examplomycin dataset: a pharmacokinetic example","text":"examplomycin dataset contains following columns: ID: Subject identifier TIME: Observation time (hours) DV: Observed concentration AMT: Dose amount (100 mg NA) EVID: Event type (101 dose, 0 observation) CMT: Compartment number (1 depot, 2 central) dataset serves realistic example demonstrating aggregate data modeling techniques admr package.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"introduction-to-aggregate-data-modeling-with-admr","dir":"Articles","previous_headings":"","what":"Introduction to Aggregate Data Modeling with admr","title":"Combining multiple datasets with admr","text":"vignette provides introduction using multiple datasets admr package R. example combine different datasets non-overlapping timepoints. However, principles can applied datasets overlapping timepoints; even datasets different dosing regimens. Therefore, vignette can used guide meta-analysis pharmacokinetic data. research currently conducted validate approach meta-analysis model averaging.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Required Packages","title":"Combining multiple datasets with admr","text":"First, ensure necessary packages loaded:","code":"library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm) library(ggplot2)  # For visualization library(units)"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"understanding-the-data-format","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Understanding the Data Format","title":"Combining multiple datasets with admr","text":"admr package works two types data formats: Raw Data: Individual-level observations wide long format. Aggregate Data: Summary statistics (mean covariance) computed raw data. Aggregate Data means variance: Mean variance time point (covariances). vignette Variance-based modelling provides details third option. Let’s look simulated examplomycin dataset, ’ll use throughout vignette:","code":"# Load the dataset data(examplomycin) head(examplomycin) ##    ID TIME    DV AMT EVID CMT ## 1 460 0.00 0.000 100  101   1 ## 2 460 0.10 0.752   0    0   2 ## 3 460 0.25 1.932   0    0   2 ## 4 460 0.50 3.694   0    0   2 ## 5 460 1.00 3.479   0    0   2 ## 6 460 2.00 4.003   0    0   2 # Basic dataset information cat(\"Number of subjects:\", length(unique(examplomycin$ID)), \"\\n\") ## Number of subjects: 500 cat(\"Number of time points:\", length(unique(examplomycin$TIME)), \"\\n\") ## Number of time points: 10 cat(\"Time points:\", paste(sort(unique(examplomycin$TIME)), collapse = \", \"), \"\\n\") ## Time points: 0, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 12"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"converting-raw-data-to-aggregate-format","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Data Preparation","what":"Converting Raw Data to Aggregate Format","title":"Combining multiple datasets with admr","text":"first step convert simulated raw data aggregate format. real-world scenarios, might extract summary statistics published studies, depending available information. example, ’ll compute mean covariance examplomycin dataset. ’s : illustrate use multiple datasets, ’ll split data two groups based timepoints: one group timepoints 0.1, 0.25, 0.5, 1 hour; another group timepoints 2, 3, 5, 8, 12 hours. illustrates use dataset absorption phase data dataset elimination phase data. create aggregated data group separately: Compared full aggregated dataset, datasets contains subset timepoints. means covariances timepoints different datasets available, effectively reducing information content. However, admr package can still handle situation effectively.","code":"# Convert to wide format examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%  # Remove dosing events   dplyr::select(ID, TIME, DV) %>%  # Select relevant columns   pivot_wider(names_from = TIME, values_from = DV) %>%  # Convert to wide format   dplyr::select(-c(1))  # Remove ID column # Create aggregated data and filter timepoints 1 to 4 examplomycin_aggregated1 <- examplomycin_wide %>%   dplyr::select(c(1:4)) %>%   meancov()  examplomycin_aggregated2 <- examplomycin_wide %>%   dplyr::select(c(5:9)) %>%   meancov()    # View the structure of aggregated data str(examplomycin_aggregated1) ## List of 2 ##  $ E: Named num [1:4] 0.966 1.939 2.788 3.025 ##   ..- attr(*, \"names\")= chr [1:4] \"0.1\" \"0.25\" \"0.5\" \"1\" ##  $ V: num [1:4, 1:4] 0.21 0.308 0.349 0.203 0.308 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:4] \"0.1\" \"0.25\" \"0.5\" \"1\" ##   .. ..$ : chr [1:4] \"0.1\" \"0.25\" \"0.5\" \"1\" str(examplomycin_aggregated2) ## List of 2 ##  $ E: Named num [1:5] 2.258 1.651 1.063 0.751 0.512 ##   ..- attr(*, \"names\")= chr [1:5] \"2\" \"3\" \"5\" \"8\" ... ##  $ V: num [1:5, 1:5] 0.3447 0.1203 0.0764 0.064 0.0494 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:5] \"2\" \"3\" \"5\" \"8\" ... ##   .. ..$ : chr [1:5] \"2\" \"3\" \"5\" \"8\" ..."},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"visualizing-the-data","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Data Preparation","what":"Visualizing the Data","title":"Combining multiple datasets with admr","text":"fitting model, ’s helpful visualize data:","code":"# Give different colours to 1-4 and 5-9 examplomycin <- admr::examplomycin %>%   filter(EVID != 101) %>%  # Remove dosing events   mutate(TIME = factor(TIME, levels = c(0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 12))) %>%   mutate(group = ifelse(TIME %in% c(0.1, 0.25, 0.5, 1), \"Absorption\", \"Elimination\"))  ggplot(examplomycin, aes(x = TIME, y = DV, fill = group)) +   geom_boxplot(position = position_dodge(width = 0.8)) +   labs(     title = \"Examplomycin Concentration Data\",     x = \"Time (hours)\",     y = \"Concentration (mg/L)\"   ) +   theme_minimal() +   scale_fill_manual(values = c(\"Absorption\" = \"blue\", \"Elimination\" = \"red\"))"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"defining-the-pharmacokinetic-model","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Specification","what":"Defining the Pharmacokinetic Model","title":"Combining multiple datasets with admr","text":"’ll use two-compartment model first-order absorption. use solved model approach simplicity. model parameters include:","code":"rxModel <- function(){     model({       cp = linCmt(     cl,           # Clearance     v1,           # Volume of central compartment     v2,           # Volume of peripheral compartment     q,            # Inter-compartmental clearance     ka            # Absorption rate constant   )}) }  rxModel <- rxode2(rxModel) rxModel <- rxModel$simulationModel"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"creating-the-prediction-function","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Specification","what":"Creating the Prediction Function","title":"Combining multiple datasets with admr","text":"prediction function crucial admr package. : - Constructs event table dosing sampling - Solves RxODE model - Returns predicted concentrations required format Since datasets come study design, can use prediction function datasets. However, datasets different dosing regimens characteristics, need define separate prediction functions dataset. can done creating multiple genopts objects, prediction function.","code":"rxode2::rxSetSilentErr(1) ## [1] TRUE predder <- function(time, theta_i, dose = 100) {     n_individuals <- nrow(theta_i)          if (is.null(n_individuals)) {       n_individuals <- 1     }      # Create event table     ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")     ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)     ev$add.sampling(time)          # Solve model     out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)          # Format output     cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                          byrow = TRUE)          return(cp_matrix) }"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"setting-up-model-options","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Fitting","what":"Setting Up Model Options","title":"Combining multiple datasets with admr","text":"genopts function creates options object controls model fitting process: difference opts1 opts2 observation times specified time argument.","code":"opts1 <- genopts(   time = c(.1, .25, .5, 1),  # Observation times   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),  # Population parameters     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),  # Random effects     Sigma_prop = 0.04  # Proportional error   ),   nsim = 10000,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE,  # Disable first-order approximation   omega_expansion = 1,  # Omega expansion factor   f = predder    # Prediction function )    opts2 <- genopts(   time = c(2, 3, 5, 8, 12),  # Observation times   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),  # Population parameters     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),  # Random effects     Sigma_prop = 0.04  # Proportional error   ),   nsim = 10000,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE,  # Disable first-order approximation   omega_expansion = 1,  # Omega expansion factor   f = predder    # Prediction function )"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Fitting","what":"Fitting the Model","title":"Combining multiple datasets with admr","text":"fitting model, ensure opts objects aggregated datasets organized lists. fitIRMC function fits model using IR-MC algorithm:","code":"opts <- list(opts1,opts2) examplomycin_aggregated <- list(examplomycin_aggregated1, examplomycin_aggregated2)  fit.admr <- fitIRMC(   opts = opts,   obs = examplomycin_aggregated,   chains = 2,  # Number of parallel chains   maxiter = 2000,  # Maximum iterations   single_dataframe = FALSE  # Use separate data frames for each dataset ) ## Chain 1: ## Iter | NLL and Parameters (11 values) ## -------------------------------------------------------------------------------- ##    1: -1790.659    1.609    2.303    3.401    2.303    0.000   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 ##  ## ### Wide Search Phase ### ##    2: -1796.420    1.603    2.327    3.393    2.286    0.032   -2.265   -2.055   -2.305   -2.266   -2.561   -3.235 ##    3: -1796.486    1.602    2.307    3.399    2.285    0.015   -2.271   -2.119   -2.330   -2.301   -2.493   -3.235 ##    4: -1796.486    1.602    2.307    3.399    2.285    0.016   -2.271   -2.115   -2.331   -2.299   -2.496   -3.235 ##    5: -1796.486    1.602    2.308    3.399    2.285    0.016   -2.271   -2.115   -2.330   -2.299   -2.496   -3.235 ##    6: -1796.486    1.602    2.308    3.399    2.285    0.016   -2.271   -2.115   -2.330   -2.299   -2.496   -3.235 ##    7: -1796.486    1.602    2.308    3.399    2.285    0.016   -2.271   -2.115   -2.330   -2.299   -2.496   -3.235 ## Phase Wide Search Phase converged at iteration 7. ##  ## ### Focussed Search Phase ### ##    8: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ##    9: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ## Phase Focussed Search Phase converged at iteration 9. ##  ## ### Fine-Tuning Phase ### ##   10: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.110   -2.330   -2.298   -2.502   -3.235 ##   11: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ##   12: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ##   13: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ##   14: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ## Phase Fine-Tuning Phase converged at iteration 14. ##  ## ### Precision Phase ### ##   15: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.298   -2.502   -3.235 ##   16: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.299   -2.502   -3.235 ##   17: -1796.485    1.602    2.308    3.399    2.285    0.016   -2.271   -2.111   -2.330   -2.299   -2.502   -3.235 ## Phase Precision Phase converged at iteration 17. ##  ## Chain 1 Complete: Final NLL = -1796.486, Time Elapsed = 31.18 seconds ##   ## Phase Wide Search Phase converged at iteration 11. ## Phase Focussed Search Phase converged at iteration 16. ## Phase Fine-Tuning Phase converged at iteration 21. ## Phase Precision Phase converged at iteration 23. ##  ## Chain 2 Complete: Final NLL = -1796.485, Time Elapsed = 34.07 seconds ##"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"basic-diagnostics","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Basic Diagnostics","title":"Combining multiple datasets with admr","text":"print method provides summary model fit:","code":"print(fit.admr) ## -- FitIRMC Summary -- ##  ## -- Objective Function and Information Criteria -- ##  Log-likelihood: -1796.4864 ##             AIC: 3603.97 ##             BIC: 3729.69 ## Condition#(Cov): 168.65 ## Condition#(Cor): 276.77 ##  ## -- Timing Information -- ##      Best Chain: 31.1819 seconds ##      All Chains: 65.2576 seconds ##      Covariance: 38.7770 seconds ##         Elapsed: 104.03 seconds ##  ## -- Population Parameters -- ## # A tibble: 6 × 6 ##   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` ##   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> ## 1 cl             1.60    0.0155   0.968 4.96 (4.82, 5.12)               32.1 ## 2 v1             2.31    0.0954   4.13  10.04 (8.33, 12.11)             34.7 ## 3 v2             3.40    0.0440   1.30  29.94 (27.47, 32.64)            31.2 ## 4 q              2.28    0.0206   0.901 9.82 (9.43, 10.23)              31.7 ## 5 ka             0.0154  0.0906 589.    1.02 (0.85, 1.21)               28.8 ## 6 Residual Error 0.0393 NA       NA     0.0393                          NA   ##  ## -- Iteration Diagnostics -- ##  Iter | NLL and Parameters ## -------------------------------------------------------------------------------- ##    1: -1790.659 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    2: -1796.420 1.603 2.327 3.393 2.286 0.032 -2.265 -2.055 -2.305 -2.266 -2.561 -3.235 ##    3: -1796.486 1.602 2.307 3.399 2.285 0.015 -2.271 -2.119 -2.330 -2.301 -2.493 -3.235 ##    4: -1796.486 1.602 2.307 3.399 2.285 0.016 -2.271 -2.115 -2.331 -2.299 -2.496 -3.235 ##    5: -1796.486 1.602 2.308 3.399 2.285 0.016 -2.271 -2.115 -2.330 -2.299 -2.496 -3.235 ##    ... (omitted iterations) ... ##   13: -1796.485 1.602 2.308 3.399 2.285 0.016 -2.271 -2.111 -2.330 -2.298 -2.502 -3.235 ##   14: -1796.485 1.602 2.308 3.399 2.285 0.016 -2.271 -2.111 -2.330 -2.298 -2.502 -3.235 ##   15: -1796.485 1.602 2.308 3.399 2.285 0.016 -2.271 -2.111 -2.330 -2.298 -2.502 -3.235 ##   16: -1796.485 1.602 2.308 3.399 2.285 0.016 -2.271 -2.111 -2.330 -2.299 -2.502 -3.235 ##   17: -1796.485 1.602 2.308 3.399 2.285 0.016 -2.271 -2.111 -2.330 -2.299 -2.502 -3.235"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"convergence-assessment","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Convergence Assessment","title":"Combining multiple datasets with admr","text":"plot method visualizes convergence model fit: Upon inspection convergence plots, look : good chain convergence, overlapping predicted observed summary plots, similar final observed vs predicted matrices mean covariance. observe chains converge well, predicted means covariances align closely observed data.","code":"plot(fit.admr)"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"parameter-estimates","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Parameter Estimates","title":"Combining multiple datasets with admr","text":"Let’s examine parameter estimates true values used simulation. expect close true values, although, like discussed earlier, estimates may less precise due reduced information content splitting data: observe parameter estimates reasonably close true values, especially considering reduced information content splitting data two groups. deviations, particularly estimates q random effect v1, may attributed lack early timepoint data second dataset. Let’s also visualize dynamics estimated model together true model dosing simulation. ## Advanced Features","code":"# True parameter values params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 ) cat(\"True parameter values:\\n\") ## True parameter values: print(params.true) ## $beta ## cl v1 v2  q ka  ##  5 10 30 10  1  ##  ## $Omega ##      [,1] [,2] [,3] [,4] [,5] ## [1,] 0.09 0.00 0.00 0.00 0.00 ## [2,] 0.00 0.09 0.00 0.00 0.00 ## [3,] 0.00 0.00 0.09 0.00 0.00 ## [4,] 0.00 0.00 0.00 0.09 0.00 ## [5,] 0.00 0.00 0.00 0.00 0.09 ##  ## $Sigma_prop ## [1] 0.04 # Extract parameter estimates params <- fit.admr$transformed_params cat(\"Final parameter estimates:\\n\") ## Final parameter estimates: print(params) ## $beta ##        cl        v1        v2         q        ka  ##  4.963740 10.044711 29.944589  9.822392  1.015503  ##  ## $Omega ##           [,1]     [,2]       [,3]      [,4]       [,5] ## [1,] 0.1032227 0.000000 0.00000000 0.0000000 0.00000000 ## [2,] 0.0000000 0.120197 0.00000000 0.0000000 0.00000000 ## [3,] 0.0000000 0.000000 0.09731057 0.0000000 0.00000000 ## [4,] 0.0000000 0.000000 0.00000000 0.1002007 0.00000000 ## [5,] 0.0000000 0.000000 0.00000000 0.0000000 0.08267857 ##  ## $Sigma_prop ## [1] 0.03934429"},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"creating-a-dosing-plot","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr > Model Diagnostics","what":"Creating a dosing plot","title":"Combining multiple datasets with admr","text":"visualize dosing regimen predicted concentrations, can create dosing plot. helps understanding pharmacokinetic profile drug time. can done using nlmixr2-universe. First, need define model nlmixr2 syntax simulate dosing regimen estimated true models. Now defined models, can simulate dosing regimen plot results:  combined dataset model (red) closely follows true parameter model (blue). median line estimated model almost perfectly overlaps true model, indicating estimated model. However, estimated model show slightly wider population intervals. scenario isn’t problematic, since wider range still captures true dynamics. case dose optimization, results conservative dose recommendation. However, scenarios, lead - -prediction certain percentiles. estimation error expected due reduced information content variance-data.","code":"params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 ) params <- fit.admr$transformed_params  rxModel_true <- function(){   ini({     cl <- params.true$beta[\"cl\"]  # Clearance     v1 <- params.true$beta[\"v1\"]  # Volume of central compartment     v2 <- params.true$beta[\"v2\"] # Volume of peripheral compartment     q <- params.true$beta[\"q\"]    # Inter-compartmental clearance     ka <- params.true$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params.true$Omega[1,1]     eta_v1 ~ params.true$Omega[2,2]     eta_v2 ~ params.true$Omega[3,3]     eta_q ~ params.true$Omega[4,4]     eta_ka ~ params.true$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) }  rxModel_multiple <- function(){   ini({     cl <- params$beta[\"cl\"]  # Clearance     v1 <- params$beta[\"v1\"]  # Volume of central compartment     v2 <- params$beta[\"v2\"] # Volume of peripheral compartment     q <- params$beta[\"q\"]    # Inter-compartmental clearance     ka <- params$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params$Omega[1,1]     eta_v1 ~ params$Omega[2,2]     eta_v2 ~ params$Omega[3,3]     eta_q ~ params$Omega[4,4]     eta_ka ~ params$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) }  rxModel_true <- rxode2(rxModel_true()) rxModel_true <- rxModel_true$simulationModel rxModel_multiple <- rxode2(rxModel_multiple()) rxModel_multiple <- rxModel_multiple$simulationModel time_points <- seq(0, 12, by = 0.1)  # Dense time points for smooth curves ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") ev$add.dosing(dose = 100, nbr.doses = 2, dosing.interval = 6) ev$add.sampling(time_points)  sim_true <- rxSolve(rxModel_true, events = ev, cores = 0, nSub = 10000) sim_multiple <- rxSolve(rxModel_multiple, events = ev, cores = 0, nSub = 10000)  # Combine the confidence intervals with a label for the model ci_true <- as.data.frame(confint(sim_true, \"cp\", level=0.95)) %>%   mutate(Model = \"True parameters\") ## summarizing data...done ci_covar <- as.data.frame(confint(sim_multiple, \"cp\", level=0.95)) %>%   mutate(Model = \"Estimated model\") ## summarizing data...done # Bind them together ci_all <- bind_rows(ci_true, ci_covar) %>%   mutate(     p1 = as.numeric(as.character(p1)),     Percentile = factor(Percentile, levels = unique(Percentile[order(p1)]))   )  # Plot both models ggplot(ci_all, aes(x = time, group = interaction(Model, Percentile))) +   geom_ribbon(aes(ymin = p2.5, ymax = p97.5, fill = Model),               alpha = 0.2, colour = NA) +   geom_line(aes(y = p50, colour = Model), size = 0.8) +   labs(     title = \"Central Concentration Simulations\",     x = \"Time\",     y = \"Central Concentration (mg/L)\"   ) +   theme_bw(base_size = 14) +   scale_colour_manual(values = c(\"True parameters\" = \"blue\",                                  \"Estimated model\" = \"red\")) +   scale_fill_manual(values = c(\"True parameters\" = \"blue\",                                \"Estimated model\" = \"red\")) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://vanhasseltlab.github.io/admr/articles/multiple.html","id":"best-practices","dir":"Articles","previous_headings":"Introduction to Aggregate Data Modeling with admr","what":"Best Practices","title":"Combining multiple datasets with admr","text":"conclude, best practices using admr package aggregate data modeling: Always check data missing values outliers Ensure time points consistent across subjects Consider impact dosing events analysis Start simple model gradually add complexity Use meaningful initial values parameters Consider parameter transformations better estimation Use multiple chains improve optimization Monitor convergence carefully Check parameter estimates biological plausibility Always examine convergence plots Validate model predictions observed data information, see package documentation vignettes.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"variance-based-modelling","dir":"Articles","previous_headings":"","what":"Variance based modelling","title":"Variance-only based modelling with admr","text":"vignette provides introduction variance-based modeling using admr package R. ’ll cover essential steps prepare data, specify pharmacokinetic model, fit model aggregate data, evaluate results. ’ll compare results using mean variance data full mean covariance data. Variance based modeling particularly useful complex aggregate data available, means variances reported. admr package implements Iterative Reweighting Monte Carlo (IRMC) algorithm, efficiently fits models aggregate data iteratively updating parameter estimates using weighted importance sampling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"required-packages","dir":"Articles","previous_headings":"Variance based modelling","what":"Required Packages","title":"Variance-only based modelling with admr","text":"First, need load necessary packages:","code":"library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm) library(ggplot2)  # For visualization library(units)"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"understanding-the-data-format","dir":"Articles","previous_headings":"Variance based modelling","what":"Understanding the Data Format","title":"Variance-only based modelling with admr","text":"admr package works two types data formats: Raw Data: Individual-level observations wide long format. Aggregate Data: Summary statistics (mean covariance) computed raw data. Aggregate Data means variance: Mean variance time point (covariances). Let’s look examplomycin dataset, ’ll use throughout vignette:","code":"# Load the dataset data(examplomycin) head(examplomycin) ##    ID TIME    DV AMT EVID CMT ## 1 460 0.00 0.000 100  101   1 ## 2 460 0.10 0.752   0    0   2 ## 3 460 0.25 1.932   0    0   2 ## 4 460 0.50 3.694   0    0   2 ## 5 460 1.00 3.479   0    0   2 ## 6 460 2.00 4.003   0    0   2 # Basic dataset information cat(\"Number of subjects:\", length(unique(examplomycin$ID)), \"\\n\") ## Number of subjects: 500 cat(\"Number of time points:\", length(unique(examplomycin$TIME)), \"\\n\") ## Number of time points: 10 cat(\"Time points:\", paste(sort(unique(examplomycin$TIME)), collapse = \", \"), \"\\n\") ## Time points: 0, 0.1, 0.25, 0.5, 1, 2, 3, 5, 8, 12"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"converting-raw-data-to-aggregate-format","dir":"Articles","previous_headings":"Variance based modelling > Data Preparation","what":"Converting Raw Data to Aggregate Format","title":"Variance-only based modelling with admr","text":"first step convert simulated raw data aggregate format. , create two versions aggregated data: one mean covariance, another mean variance . real-world scenarios, access raw data, step included demonstration purposes.","code":"# Convert to wide format examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%  # Remove dosing events   dplyr::select(ID, TIME, DV) %>%  # Select relevant columns   pivot_wider(names_from = TIME, values_from = DV) %>%  # Convert to wide format   dplyr::select(-c(1))  # Remove ID column  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Compute mean and covariance  # View the structure of aggregated data examplomycin_aggregated ## $E ##      0.1     0.25      0.5        1        2        3        5        8  ## 0.966418 1.938774 2.787908 3.024706 2.257656 1.650808 1.063120 0.751180  ##       12  ## 0.512168  ##  ## $V ##               0.1         0.25         0.5           1          2           3 ## 0.1   0.210318331  0.307810566  0.34863077 0.202610737 0.02244783 -0.04472722 ## 0.25  0.307810566  0.707512991  0.65887098 0.416118052 0.05871261 -0.07441765 ## 0.5   0.348630772  0.658870977  1.09983366 0.530554165 0.10572618 -0.07538386 ## 1     0.202610737  0.416118052  0.53055416 0.803744604 0.16252833  0.02792441 ## 2     0.022447834  0.058712608  0.10572618 0.162528331 0.34465070  0.12026872 ## 3    -0.044727222 -0.074417647 -0.07538386 0.027924410 0.12026872  0.24989260 ## 5    -0.018976800 -0.042420657 -0.04648286 0.001618855 0.07644080  0.11148574 ## 8    -0.006630907 -0.011273701 -0.01981830 0.016197981 0.06398700  0.07493319 ## 12   -0.005625994 -0.005018766 -0.01492001 0.014748325 0.04941463  0.05460018 ##                 5            8           12 ## 0.1  -0.018976800 -0.006630907 -0.005625994 ## 0.25 -0.042420657 -0.011273701 -0.005018766 ## 0.5  -0.046482865 -0.019818299 -0.014920009 ## 1     0.001618855  0.016197981  0.014748325 ## 2     0.076440801  0.063987002  0.049414630 ## 3     0.111485737  0.074933189  0.054600176 ## 5     0.154215442  0.087680168  0.061332530 ## 8     0.087680168  0.096530356  0.057621124 ## 12    0.061332530  0.057621124  0.057988752 # Transform into mean and variance only format examplomycin_aggregated_var <- examplomycin_aggregated examplomycin_aggregated_var$V <- diag(diag(examplomycin_aggregated_var$V))  # View the structure of mean and variance only data examplomycin_aggregated_var ## $E ##      0.1     0.25      0.5        1        2        3        5        8  ## 0.966418 1.938774 2.787908 3.024706 2.257656 1.650808 1.063120 0.751180  ##       12  ## 0.512168  ##  ## $V ##            [,1]     [,2]     [,3]      [,4]      [,5]      [,6]      [,7] ##  [1,] 0.2103183 0.000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 ##  [2,] 0.0000000 0.707513 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 ##  [3,] 0.0000000 0.000000 1.099834 0.0000000 0.0000000 0.0000000 0.0000000 ##  [4,] 0.0000000 0.000000 0.000000 0.8037446 0.0000000 0.0000000 0.0000000 ##  [5,] 0.0000000 0.000000 0.000000 0.0000000 0.3446507 0.0000000 0.0000000 ##  [6,] 0.0000000 0.000000 0.000000 0.0000000 0.0000000 0.2498926 0.0000000 ##  [7,] 0.0000000 0.000000 0.000000 0.0000000 0.0000000 0.0000000 0.1542154 ##  [8,] 0.0000000 0.000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 ##  [9,] 0.0000000 0.000000 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 ##             [,8]       [,9] ##  [1,] 0.00000000 0.00000000 ##  [2,] 0.00000000 0.00000000 ##  [3,] 0.00000000 0.00000000 ##  [4,] 0.00000000 0.00000000 ##  [5,] 0.00000000 0.00000000 ##  [6,] 0.00000000 0.00000000 ##  [7,] 0.00000000 0.00000000 ##  [8,] 0.09653036 0.00000000 ##  [9,] 0.00000000 0.05798875"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"visualizing-the-data","dir":"Articles","previous_headings":"Variance based modelling > Data Preparation","what":"Visualizing the Data","title":"Variance-only based modelling with admr","text":"fitting model, ’s helpful visualize data:","code":"# Boxplot to visualize variability ggplot(examplomycin, aes(x = TIME, y = DV, group = TIME)) +   geom_boxplot(aes(group = TIME), width = 0.2) +   labs(     title = \"Concentration Variability at Each Time Point\",     x = \"Time (hours)\",     y = \"Concentration (mg/L)\"   ) +   theme_minimal()"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"defining-the-pharmacokinetic-model","dir":"Articles","previous_headings":"Variance based modelling > Model Specification","what":"Defining the Pharmacokinetic Model","title":"Variance-only based modelling with admr","text":"’ll use solved two-compartment model first-order absorption:","code":"# Define RxODE model rxModel <- function(){   model({     cp = linCmt(       cl,           # Clearance       v1,           # Volume of central compartment       v2,           # Volume of peripheral compartment       q,            # Inter-compartmental clearance       ka            # Absorption rate constant     )}) }  rxModel <- rxode2(rxModel) rxModel <- rxModel$simulationModel"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"creating-the-prediction-function","dir":"Articles","previous_headings":"Variance based modelling > Model Specification","what":"Creating the Prediction Function","title":"Variance-only based modelling with admr","text":"prediction function crucial admr package. : - Constructs event table dosing sampling - Solves RxODE model - Returns predicted concentrations required format can observed steps variance based modeling similar mean covariance based modeling. difference data used fitting model.","code":"rxode2::rxSetSilentErr(1) ## [1] TRUE predder <- function(time, theta_i, dose = 100) {     n_individuals <- nrow(theta_i)          if (is.null(n_individuals)) {       n_individuals <- 1     }      # Create event table     ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")     ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)     ev$add.sampling(time)          # Solve model     out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)          # Format output     cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                          byrow = TRUE)          return(cp_matrix) }"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"setting-up-model-options","dir":"Articles","previous_headings":"Variance based modelling > Model Fitting","what":"Setting Up Model Options","title":"Variance-only based modelling with admr","text":"genopts function creates options object controls model fitting process. ’ll twice: mean covariance data, mean variance data. difference two options no_cov argument, set TRUE variance data FALSE mean covariance data.","code":"opts_covar <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),  # Observation times   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),  # Population parameters     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),  # Random effects     Sigma_prop = 0.04  # Proportional error   ),   nsim = 10000,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE,  # Disable first-order approximation   omega_expansion = 1,  # Omega expansion factor   f = predder,    # Prediction function   no_cov = FALSE # Use mean and covariance format )   opts_var <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),  # Observation times   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),  # Population parameters     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),  # Random effects     Sigma_prop = 0.04  # Proportional error   ),   nsim = 10000,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE,  # Disable first-order approximation   omega_expansion = 1,  # Omega expansion factor   f = predder,    # Prediction function   no_cov = TRUE # Use mean and variance only format )"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Variance based modelling > Model Fitting","what":"Fitting the Model","title":"Variance-only based modelling with admr","text":"fitIRMC function fits model using IRMC algorithm:","code":"fit.var <- admr::fitIRMC(   opts = opts_var,   obs = examplomycin_aggregated_var,   chains = 3,  # Number of chains   maxiter = 200  # Maximum iterations ) ## Chain 1: ## Iter | NLL and Parameters (11 values) ## -------------------------------------------------------------------------------- ##    1: -1242.386    1.609    2.303    3.401    2.303    0.000   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 ##  ## ### Wide Search Phase ### ##    2: -1261.650    1.593    2.057    3.463    2.177   -0.260   -2.086   -2.747   -2.350   -4.408   -1.915   -3.387 ##    3: -1266.443    1.597    2.050    3.458    2.171   -0.246   -2.137   -2.683   -2.379   -5.410   -2.013   -3.368 ##    4: -1266.455    1.597    2.051    3.457    2.173   -0.245   -2.137   -2.681   -2.379   -5.422   -2.015   -3.360 ## Phase Wide Search Phase converged at iteration 4. ##  ## ### Focussed Search Phase ### ##    5: -1266.455    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.677   -2.382   -5.434   -2.015   -3.362 ##    6: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.677   -2.382   -5.444   -2.015   -3.362 ##    7: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.677   -2.382   -5.454   -2.015   -3.362 ##    8: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.677   -2.382   -5.464   -2.015   -3.362 ##    9: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.676   -2.382   -5.474   -2.015   -3.362 ##   10: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.676   -2.382   -5.479   -2.015   -3.362 ##   11: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.676   -2.382   -5.484   -2.015   -3.362 ##   12: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.676   -2.383   -5.489   -2.015   -3.362 ##   13: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.135   -2.676   -2.383   -5.488   -2.016   -3.361 ## Phase Focussed Search Phase converged at iteration 13. ##  ## ### Fine-Tuning Phase ### ##   14: -1266.456    1.598    2.052    3.456    2.172   -0.244   -2.136   -2.675   -2.384   -5.490   -2.016   -3.360 ## Phase Fine-Tuning Phase converged at iteration 14. ##  ## ### Precision Phase ### ##   15: -1266.456    1.598    2.054    3.455    2.173   -0.242   -2.136   -2.668   -2.388   -5.480   -2.019   -3.358 ##   16: -1266.456    1.598    2.054    3.455    2.173   -0.242   -2.136   -2.669   -2.388   -5.480   -2.019   -3.358 ## Phase Precision Phase converged at iteration 16. ##  ## Chain 1 Complete: Final NLL = -1266.456, Time Elapsed = 31.81 seconds ##   ## Phase Focussed Search Phase converged at iteration 120. ## Phase Fine-Tuning Phase converged at iteration 121. ## Phase Precision Phase converged at iteration 143. ##  ## Chain 2 Complete: Final NLL = -1266.456, Time Elapsed = 171.47 seconds ##   ## Phase Wide Search Phase converged at iteration 10. ##  ## Chain 3 Complete: Final NLL = -1266.107, Time Elapsed = 240.36 seconds ## fit.covar <- admr::fitIRMC(   opts = opts_covar,   obs = examplomycin_aggregated,   chains = 3,  # Number of chains   maxiter = 200  # Maximum iterations ) ## Chain 1: ## Iter | NLL and Parameters (11 values) ## -------------------------------------------------------------------------------- ##    1: -1839.520    1.609    2.303    3.401    2.303    0.000   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 ##  ## ### Wide Search Phase ### ##    2: -1845.312    1.601    2.323    3.399    2.285    0.032   -2.274   -2.186   -2.325   -2.213   -2.412   -3.235 ##    3: -1845.355    1.601    2.317    3.401    2.285    0.027   -2.283   -2.217   -2.339   -2.238   -2.388   -3.235 ##    4: -1845.355    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.340   -2.237   -2.388   -3.235 ##    5: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.340   -2.236   -2.389   -3.235 ##    6: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##    7: -1845.354    1.601    2.317    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Wide Search Phase converged at iteration 7. ##  ## ### Focussed Search Phase ### ##    8: -1845.355    1.601    2.317    3.401    2.285    0.026   -2.282   -2.217   -2.338   -2.237   -2.388   -3.235 ##    9: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   10: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   11: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Focussed Search Phase converged at iteration 11. ##  ## ### Fine-Tuning Phase ### ##   12: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.390   -3.235 ##   13: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.390   -3.235 ##   14: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.390   -3.235 ## Phase Fine-Tuning Phase converged at iteration 14. ##  ## ### Precision Phase ### ##   15: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.390   -3.235 ##   16: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ##   17: -1845.354    1.601    2.318    3.401    2.285    0.027   -2.282   -2.216   -2.339   -2.236   -2.389   -3.235 ## Phase Precision Phase converged at iteration 17. ##  ## Chain 1 Complete: Final NLL = -1845.355, Time Elapsed = 15.95 seconds ##   ## Phase Wide Search Phase converged at iteration 13. ## Phase Focussed Search Phase converged at iteration 15. ## Phase Fine-Tuning Phase converged at iteration 16. ## Phase Precision Phase converged at iteration 18. ##  ## Chain 2 Complete: Final NLL = -1845.354, Time Elapsed = 21.09 seconds ##   ## Phase Wide Search Phase converged at iteration 8. ## Phase Focussed Search Phase converged at iteration 10. ## Phase Fine-Tuning Phase converged at iteration 11. ## Phase Precision Phase converged at iteration 13. ##  ## Chain 3 Complete: Final NLL = -1845.354, Time Elapsed = 14.45 seconds ##"},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"basic-diagnostics","dir":"Articles","previous_headings":"Variance based modelling > Model Diagnostics","what":"Basic Diagnostics","title":"Variance-only based modelling with admr","text":"print method provides summary model fit:","code":"print(fit.var) ## -- FitIRMC Summary -- ##  ## -- Objective Function and Information Criteria -- ##  Log-likelihood: -1266.4561 ##             AIC: 2543.91 ##             BIC: 2601.27 ## Condition#(Cov): 489.08 ## Condition#(Cor): 695.66 ##  ## -- Timing Information -- ##      Best Chain: 31.8088 seconds ##      All Chains: 443.6457 seconds ##      Covariance: 23.0615 seconds ##         Elapsed: 466.71 seconds ##  ## -- Population Parameters -- ## # A tibble: 6 × 6 ##   Parameter         Est.      SE `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` ##   <chr>            <dbl>   <dbl>  <dbl> <chr>                          <dbl> ## 1 cl              1.60    0.0158  0.986 4.94 (4.79, 5.10)              34.4  ## 2 v1              2.05    0.0794  3.87  7.80 (6.68, 9.12)              26.3  ## 3 v2              3.46    0.0389  1.12  31.66 (29.34, 34.17)           30.3  ## 4 q               2.17    0.0284  1.31  8.79 (8.31, 9.29)               6.46 ## 5 ka             -0.242   0.0737 30.5   0.79 (0.68, 0.91)              36.4  ## 6 Residual Error  0.0348 NA      NA     0.0348                         NA    ##  ## -- Iteration Diagnostics -- ##  Iter | NLL and Parameters ## -------------------------------------------------------------------------------- ##    1: -1242.386 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    2: -1261.650 1.593 2.057 3.463 2.177 -0.260 -2.086 -2.747 -2.350 -4.408 -1.915 -3.387 ##    3: -1266.443 1.597 2.050 3.458 2.171 -0.246 -2.137 -2.683 -2.379 -5.410 -2.013 -3.368 ##    4: -1266.455 1.597 2.051 3.457 2.173 -0.245 -2.137 -2.681 -2.379 -5.422 -2.015 -3.360 ##    5: -1266.455 1.598 2.052 3.456 2.172 -0.244 -2.135 -2.677 -2.382 -5.434 -2.015 -3.362 ##    ... (omitted iterations) ... ##   12: -1266.456 1.598 2.052 3.456 2.172 -0.244 -2.135 -2.676 -2.383 -5.489 -2.015 -3.362 ##   13: -1266.456 1.598 2.052 3.456 2.172 -0.244 -2.135 -2.676 -2.383 -5.488 -2.016 -3.361 ##   14: -1266.456 1.598 2.052 3.456 2.172 -0.244 -2.136 -2.675 -2.384 -5.490 -2.016 -3.360 ##   15: -1266.456 1.598 2.054 3.455 2.173 -0.242 -2.136 -2.668 -2.388 -5.480 -2.019 -3.358 ##   16: -1266.456 1.598 2.054 3.455 2.173 -0.242 -2.136 -2.669 -2.388 -5.480 -2.019 -3.358 print(fit.covar) ## -- FitIRMC Summary -- ##  ## -- Objective Function and Information Criteria -- ##  Log-likelihood: -1845.3550 ##             AIC: 3701.71 ##             BIC: 3759.07 ## Condition#(Cov): 152.22 ## Condition#(Cor): 216.91 ##  ## -- Timing Information -- ##      Best Chain: 15.9506 seconds ##      All Chains: 51.4956 seconds ##      Covariance: 23.1620 seconds ##         Elapsed: 74.66 seconds ##  ## -- Population Parameters -- ## # A tibble: 6 × 6 ##   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` ##   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> ## 1 cl             1.60    0.0152   0.950 4.96 (4.81, 5.11)               31.9 ## 2 v1             2.32    0.0865   3.73  10.15 (8.57, 12.02)             33.0 ## 3 v2             3.40    0.0400   1.18  30.00 (27.74, 32.45)            31.1 ## 4 q              2.29    0.0212   0.928 9.83 (9.43, 10.24)              32.7 ## 5 ka             0.0265  0.0817 308.    1.03 (0.87, 1.21)               30.3 ## 6 Residual Error 0.0394 NA       NA     0.0394                          NA   ##  ## -- Iteration Diagnostics -- ##  Iter | NLL and Parameters ## -------------------------------------------------------------------------------- ##    1: -1839.520 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 ##    2: -1845.312 1.601 2.323 3.399 2.285 0.032 -2.274 -2.186 -2.325 -2.213 -2.412 -3.235 ##    3: -1845.355 1.601 2.317 3.401 2.285 0.027 -2.283 -2.217 -2.339 -2.238 -2.388 -3.235 ##    4: -1845.355 1.601 2.317 3.401 2.285 0.027 -2.282 -2.216 -2.340 -2.237 -2.388 -3.235 ##    5: -1845.354 1.601 2.317 3.401 2.285 0.027 -2.282 -2.216 -2.340 -2.236 -2.389 -3.235 ##    ... (omitted iterations) ... ##   13: -1845.354 1.601 2.318 3.401 2.285 0.027 -2.282 -2.216 -2.339 -2.236 -2.390 -3.235 ##   14: -1845.354 1.601 2.318 3.401 2.285 0.027 -2.282 -2.216 -2.339 -2.236 -2.390 -3.235 ##   15: -1845.354 1.601 2.318 3.401 2.285 0.027 -2.282 -2.216 -2.339 -2.236 -2.390 -3.235 ##   16: -1845.354 1.601 2.318 3.401 2.285 0.027 -2.282 -2.216 -2.339 -2.236 -2.389 -3.235 ##   17: -1845.354 1.601 2.318 3.401 2.285 0.027 -2.282 -2.216 -2.339 -2.236 -2.389 -3.235"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"convergence-assessment","dir":"Articles","previous_headings":"Variance based modelling > Model Diagnostics","what":"Convergence Assessment","title":"Variance-only based modelling with admr","text":"plot method visualizes convergence model fit: First variance data plotted. see model converges well within specified iterations. Now plot mean covariance data fit: data seems converge slightly better, especially looking chain comparisons. chains converge similar values, whereas variance data, chains show variability resulting NLL. due non-identifiability issues parameters variance data used.","code":"plot(fit.var) plot(fit.covar)"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"true-vs-estimated-parameters","dir":"Articles","previous_headings":"Variance based modelling > Model Diagnostics","what":"True vs Estimated Parameters","title":"Variance-only based modelling with admr","text":"Given true parameter estimates known, can compare estimated parameters true values: observe methods recover true parameters reasonably well, mean covariance method provides accurate estimates due additional information covariances. example model, especially inter-compartmental clearance (q) random effect challenging estimate accurately variance data. However, using larger sample sizes studies help improve estimates data. illustrate differences dynamics, can simulate concentration-time profiles using true parameters estimated parameters methods.","code":"params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 ) cat(\"True parameter values:\\n\") ## True parameter values: print(params.true) ## $beta ## cl v1 v2  q ka  ##  5 10 30 10  1  ##  ## $Omega ##      [,1] [,2] [,3] [,4] [,5] ## [1,] 0.09 0.00 0.00 0.00 0.00 ## [2,] 0.00 0.09 0.00 0.00 0.00 ## [3,] 0.00 0.00 0.09 0.00 0.00 ## [4,] 0.00 0.00 0.00 0.09 0.00 ## [5,] 0.00 0.00 0.00 0.00 0.09 ##  ## $Sigma_prop ## [1] 0.04 cat(\"Estimated parameters (mean and variance only):\\n\") ## Estimated parameters (mean and variance only): print(fit.var$transformed_params) ## $beta ##         cl         v1         v2          q         ka  ##  4.9426945  7.8010034 31.6642476  8.7855438  0.7850831  ##  ## $Omega ##           [,1]       [,2]       [,3]        [,4]     [,5] ## [1,] 0.1181541 0.00000000 0.00000000 0.000000000 0.000000 ## [2,] 0.0000000 0.06934149 0.00000000 0.000000000 0.000000 ## [3,] 0.0000000 0.00000000 0.09179961 0.000000000 0.000000 ## [4,] 0.0000000 0.00000000 0.00000000 0.004168057 0.000000 ## [5,] 0.0000000 0.00000000 0.00000000 0.000000000 0.132778 ##  ## $Sigma_prop ## [1] 0.03479938"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"dosing-plot-with-confidence-intervals-for-true-vs-estimated-parameters","dir":"Articles","previous_headings":"Variance based modelling > Model Diagnostics","what":"Dosing plot with Confidence Intervals for true vs estimated parameters","title":"Variance-only based modelling with admr","text":"Let’s simulate concentration-time profiles using true parameters estimated parameters methods, plot results confidence intervals. First, define models using true parameters estimated parameters methods: Now can simulate concentration-time profiles plot results:  models capture central tendency true parameters dynamics well. However, variance model shows slightly wider population intervals. scenario isn’t problematic, since wider range still captures true dynamics. However, scenarios, lead - -prediction certain percentiles. estimation error expected due reduced information content variance-data.","code":"params.true <- list(   beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),   Omega = diag(rep(0.09, 5)),   Sigma_prop = 0.04 )  params.covar <- fit.covar$transformed_params params.var <- fit.var$transformed_params  rxModel_true <- function(){   ini({     cl <- params.true$beta[\"cl\"]  # Clearance     v1 <- params.true$beta[\"v1\"]  # Volume of central compartment     v2 <- params.true$beta[\"v2\"] # Volume of peripheral compartment     q <- params.true$beta[\"q\"]    # Inter-compartmental clearance     ka <- params.true$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params.true$Omega[1,1]     eta_v1 ~ params.true$Omega[2,2]     eta_v2 ~ params.true$Omega[3,3]     eta_q ~ params.true$Omega[4,4]     eta_ka ~ params.true$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) } rxModel_covar <- function(){   ini({     cl <- params.covar$beta[\"cl\"]  # Clearance     v1 <- params.covar$beta[\"v1\"]  # Volume of central compartment     v2 <- params.covar$beta[\"v2\"] # Volume of peripheral compartment     q <- params.covar$beta[\"q\"]    # Inter-compartmental clearance     ka <- params.covar$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params.covar$Omega[1,1]     eta_v1 ~ params.covar$Omega[2,2]     eta_v2 ~ params.covar$Omega[3,3]     eta_q ~ params.covar$Omega[4,4]     eta_ka ~ params.covar$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) } rxModel_var <- function(){   ini({     cl <- params.var$beta[\"cl\"]  # Clearance     v1 <- params.var$beta[\"v1\"]  # Volume of central compartment     v2 <- params.var$beta[\"v2\"] # Volume of peripheral compartment     q <- params.var$beta[\"q\"]    # Inter-compartmental clearance     ka <- params.var$beta[\"ka\"]   # Absorption rate constant      eta_cl ~ params.var$Omega[1,1]     eta_v1 ~ params.var$Omega[2,2]     eta_v2 ~ params.var$Omega[3,3]     eta_q ~ params.var$Omega[4,4]     eta_ka ~ params.var$Omega[5,5]   })   model({     cl <- cl * exp(eta_cl)     v1 <- v1 * exp(eta_v1)     v2 <- v2 * exp(eta_v2)     q <- q * exp(eta_q)     ka <- ka * exp(eta_ka)     cp = linCmt(cl, v1, v2, q, ka)   }) }  rxModel_true <- rxode2(rxModel_true()) rxModel_true <- rxModel_true$simulationModel rxModel_covar <- rxode2(rxModel_covar()) rxModel_covar <- rxModel_covar$simulationModel rxModel_var <- rxode2(rxModel_var()) rxModel_var <- rxModel_var$simulationModel time_points <- seq(0, 12, by = 0.01)  # Dense time points for smooth curves ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") ev$add.dosing(dose = 100, nbr.doses = 2, dosing.interval = 6) ev$add.sampling(time_points)   sim_true <- rxSolve(rxModel_true, events = ev, cores = 0, nSub = 10000) sim_covar <- rxSolve(rxModel_covar, events = ev, cores = 0, nSub = 10000) sim_var <- rxSolve(rxModel_var, events = ev, cores = 0, nSub = 10000)  # Combine the confidence intervals with a label for the model ci_true <- as.data.frame(confint(sim_true, \"cp\", level=0.95)) %>%   mutate(Model = \"True parameters\") ## summarizing data...done ci_covar <- as.data.frame(confint(sim_covar, \"cp\", level=0.95)) %>%   mutate(Model = \"Covariance fit\") ## summarizing data...done ci_var <- as.data.frame(confint(sim_var, \"cp\", level=0.95)) %>%   mutate(Model = \"Variance fit\") ## summarizing data...done # Bind them together ci_true_covar <- bind_rows(ci_true, ci_covar) %>%   mutate(     p1 = as.numeric(as.character(p1)),     Percentile = factor(Percentile, levels = unique(Percentile[order(p1)]))   )  ci_true_var <- bind_rows(ci_true, ci_var) %>%   mutate(     p1 = as.numeric(as.character(p1)),     Percentile = factor(Percentile, levels = unique(Percentile[order(p1)]))   )  # Plot both models ggplot(ci_true_covar, aes(x = time, group = interaction(Model, Percentile))) +   geom_ribbon(aes(ymin = p2.5, ymax = p97.5, fill = Model),               alpha = 0.2, colour = NA) +   geom_line(aes(y = p50, colour = Model), size = 0.8) +   labs(     title = \"Central Concentration Simulations\",     x = \"Time\",     y = \"Central Concentration (mg/L)\"   ) +   theme_bw(base_size = 14) +   scale_colour_manual(values = c(\"True parameters\" = \"blue\",                                  \"Covariance fit\" = \"red\")) +   scale_fill_manual(values = c(\"True parameters\" = \"blue\",                                \"Covariance fit\" = \"red\")) +   coord_cartesian(xlim = c(0, 12), ylim = c(0, 7)) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ggplot(ci_true_var, aes(x = time, group = interaction(Model, Percentile))) +   geom_ribbon(aes(ymin = p2.5, ymax = p97.5, fill = Model),               alpha = 0.2, colour = NA) +   geom_line(aes(y = p50, colour = Model), size = 0.8) +   labs(     title = \"Central Concentration Simulations\",     x = \"Time\",     y = \"Central Concentration (mg/L)\"   ) +   theme_bw(base_size = 14) +   scale_colour_manual(values = c(\"True parameters\" = \"blue\",                                  \"Variance fit\" = \"darkgreen\")) +   scale_fill_manual(values = c(\"True parameters\" = \"blue\",                                  \"Variance fit\" = \"darkgreen\")) +   coord_cartesian(xlim = c(0, 12), ylim = c(0, 7))"},{"path":"https://vanhasseltlab.github.io/admr/articles/variance.html","id":"best-practices","dir":"Articles","previous_headings":"Variance based modelling","what":"Best Practices","title":"Variance-only based modelling with admr","text":"recap, best practices variance-based (also covariance-based) modeling admr: Always check data missing values outliers Ensure time points consistent across subjects Consider impact dosing events analysis Start simple model gradually add complexity Use meaningful initial values parameters Consider parameter transformations better estimation Use multiple chains improve optimization Monitor convergence carefully Check parameter estimates biological plausibility Always examine convergence plots Validate model predictions observed data information, see package documentation vignettes.","code":""},{"path":"https://vanhasseltlab.github.io/admr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"H. van de Beek. Author, maintainer. P..J. Välitalo. Author. L.B. Zwep. Author. J.G.C. van Hasselt. Author.","code":""},{"path":"https://vanhasseltlab.github.io/admr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van de Beek H, Välitalo P, Zwep L, van Hasselt J (2025). admr: Aggregate Data Modelling R. R package version 0.2.0, https://vanhasseltlab.github.io/admr.","code":"@Manual{,   title = {admr: Aggregate Data Modelling in R},   author = {H. {van de Beek} and P.A.J. Välitalo and L.B. Zwep and J.G.C. {van Hasselt}},   year = {2025},   note = {R package version 0.2.0},   url = {https://vanhasseltlab.github.io/admr}, }"},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"admr-aggregate-data-modeling-in-r","dir":"","previous_headings":"","what":"Aggregate Data Modelling in R","title":"Aggregate Data Modelling in R","text":"admr (Aggregate Data Modeling R) open-source R package designed facilitate pharmacometric modeling using summary-level data. enables users work aggregate data, mean observations variance-covariance matrices, fit pharmacokinetic pharmacodynamic (PK/PD) models efficiently. package implements newly developed Expectation-Maximization (EM) algorithm enhance computational performance provides tools advanced modeling applications.","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Aggregate Data Modelling in R","text":"admr package provides comprehensive framework aggregate data modeling pharmacometrics, offering several key advantages: Efficient Parameter Estimation: Uses Iterative Reweighting Monte Carlo (IRMC) algorithm robust fast parameter estimation. Flexible Data Integration: Works individual-level aggregate data, making ideal meta-analyses literature-based modeling. Advanced Modeling Features: Supports complex PK/PD models various error structures parameter transformations. Comprehensive Diagnostics: Built-tools model assessment, convergence checking, parameter stability analysis.","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Aggregate Data Modelling in R","text":"Efficient Model Fitting: Uses iterative reweighted Monte Carlo (IRMC) robust parameter estimation, improving speed scalability compared traditional Monte Carlo methods. Flexible Data Formats: Supports raw aggregate data formats, allowing integration summary-level data diverse sources, including published literature simulated models. Comprehensive Diagnostics: Built-tools model assessment, convergence checking, parameter stability analysis. Meta-Analysis Support: Facilitates model-based meta-analyses enabling combination summary data across studies. R Integration: Fully compatible R, leveraging popular pharmacometric modeling libraries like rxode2. Open-Source: Developed accessibility ease use pharmacometric community.","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Aggregate Data Modelling in R","text":"R package. R required, RStudio recommended. can install development version admr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"/admr\")"},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Aggregate Data Modelling in R","text":"complete example use admr fit pharmacokinetic model aggregate data:","code":"# Load required libraries library(admr) library(rxode2) #> rxode2 4.1.0 using 7 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` library(nlmixr2) #> ── Attaching packages ───────────────────────────────────────── nlmixr2 4.0.1 ── #> ✔ lotri        1.0.2     ✔ nlmixr2extra 3.0.2 #> ✔ nlmixr2data  2.0.9     ✔ nlmixr2plot  3.0.3 #> ✔ nlmixr2est   4.1.0 #> ── Optional Packages Loaded/Ignored ─────────────────────────── nlmixr2 4.0.1 ── #> ✖ babelmixr2     ✖ nonmem2rx #> ✖ ggPMX     ✖ posologyr #> ✖ monolix2rx     ✖ shinyMixR #> ✖ nlmixr2lib     ✖ xpose.nlmixr2 #> ✖ nlmixr2rpt #> ── Conflicts ───────────────────────────────────────────── nlmixr2conflicts() ── #> ✖ nlmixr2est::boxCox()     masks rxode2::boxCox() #> ✖ nlmixr2est::yeoJohnson() masks rxode2::yeoJohnson() library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) library(mnorm)  # Load and prepare the simulated individual-level data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data as example examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- RxODE({   cp = linCmt(     cl,           # Clearance     v1,           # Volume of the central compartment     v2,           # Volume of the peripheral compartment     q,            # Inter-compartmental clearance     ka            # Absorption rate constant   ) }) #> using C compiler: 'gcc.exe (GCC) 14.2.0'  # Define prediction function predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1      ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)      out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)   cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                       byrow = TRUE)   return(cp_matrix) }  # Create options opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),     Sigma_prop = 0.04   ),   nsim = 2500,   n = 500,   fo_appr = FALSE,   omega_expansion = 1.2,   f = predder )  # Fit model to data result <- fitIRMC(opts = opts, obs = examplomycin_aggregated, chains = 2) #> Chain 1: #> Iter | NLL and Parameters (11 values) #> -------------------------------------------------------------------------------- #>    1: -1839.577    1.609    2.303    3.401    2.303    0.000   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 #>  #> ### Wide Search Phase ### #>    2: -1845.241    1.601    2.309    3.404    2.284    0.020   -2.280   -2.169   -2.334   -2.245   -2.437   -3.235 #>    3: -1845.278    1.600    2.305    3.406    2.284    0.016   -2.287   -2.200   -2.344   -2.270   -2.412   -3.235 #>    4: -1845.279    1.600    2.305    3.406    2.284    0.016   -2.287   -2.199   -2.344   -2.269   -2.412   -3.235 #> Phase Wide Search Phase converged at iteration 4. #>  #> ### Focussed Search Phase ### #>    5: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>    6: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>    7: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>    8: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>    9: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #> Phase Focussed Search Phase converged at iteration 9. #>  #> ### Fine-Tuning Phase ### #>   10: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>   11: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #>   12: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.200   -2.343   -2.264   -2.411   -3.235 #> Phase Fine-Tuning Phase converged at iteration 12. #>  #> ### Precision Phase ### #>   13: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.201   -2.343   -2.265   -2.410   -3.235 #>   14: -1845.280    1.601    2.307    3.405    2.285    0.018   -2.286   -2.201   -2.343   -2.265   -2.410   -3.235 #> Phase Precision Phase converged at iteration 14. #>  #> Chain 1 Complete: Final NLL = -1845.280, Time Elapsed = 5.34 seconds #>   #> Phase Wide Search Phase converged at iteration 6. #> Phase Focussed Search Phase converged at iteration 12. #> Phase Fine-Tuning Phase converged at iteration 14. #> Phase Precision Phase converged at iteration 16. #>  #> Chain 2 Complete: Final NLL = -1845.281, Time Elapsed = 6.99 seconds #>  print(result) #> -- FitIRMC Summary -- #>  #> -- Objective Function and Information Criteria -- #>  Log-likelihood: -1845.2806 #>             AIC: 3701.56 #>             BIC: 3758.92 #> Condition#(Cov): 143.74 #> Condition#(Cor): 203.03 #>  #> -- Timing Information -- #>      Best Chain: 6.9939 seconds #>      All Chains: 12.3353 seconds #>      Covariance: 30.2940 seconds #>         Elapsed: 42.63 seconds #>  #> -- Population Parameters -- #> # A tibble: 6 × 6 #>   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` #>   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> #> 1 cl             1.60    0.0153   0.955 4.96 (4.81, 5.11)               31.9 #> 2 v1             2.31    0.0839   3.64  10.04 (8.52, 11.84)             33.3 #> 3 v2             3.41    0.0393   1.16  30.12 (27.88, 32.53)            31.0 #> 4 q              2.28    0.0213   0.931 9.82 (9.42, 10.24)              32.2 #> 5 ka             0.0179  0.0792 441.    1.02 (0.87, 1.19)               30.0 #> 6 Residual Error 0.0394 NA       NA     0.0394                          NA   #>  #> -- Iteration Diagnostics -- #>  Iter | NLL and Parameters #> -------------------------------------------------------------------------------- #>    1: -1565.147 1.700 2.198 3.118 2.034 0.000 -2.665 -2.784 -2.129 -2.208 -2.463 -3.133 #>    2: -1842.631 1.605 2.411 3.389 2.288 0.089 -2.325 -1.946 -2.291 -2.121 -2.604 -3.234 #>    3: -1845.276 1.601 2.305 3.406 2.285 0.016 -2.285 -2.197 -2.345 -2.271 -2.413 -3.235 #>    4: -1845.277 1.600 2.305 3.406 2.284 0.016 -2.286 -2.197 -2.344 -2.268 -2.414 -3.235 #>    5: -1845.280 1.600 2.306 3.406 2.285 0.017 -2.286 -2.201 -2.342 -2.266 -2.410 -3.235 #>    ... (omitted iterations) ... #>   12: -1845.281 1.601 2.307 3.405 2.285 0.018 -2.286 -2.201 -2.343 -2.265 -2.410 -3.235 #>   13: -1845.280 1.601 2.307 3.405 2.285 0.018 -2.286 -2.201 -2.343 -2.265 -2.410 -3.235 #>   14: -1845.280 1.601 2.307 3.405 2.285 0.018 -2.286 -2.201 -2.343 -2.265 -2.410 -3.235 #>   15: -1845.280 1.601 2.307 3.405 2.285 0.018 -2.286 -2.201 -2.343 -2.265 -2.410 -3.235 #>   16: -1845.280 1.601 2.307 3.405 2.285 0.018 -2.286 -2.201 -2.343 -2.265 -2.410 -3.235"},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Aggregate Data Modelling in R","text":"package documentation available https://vanhasseltlab.github.io/admr/. Key documentation sections include: Getting Started vignettes Function Reference Examples","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use Cases","title":"Aggregate Data Modelling in R","text":"admr package particularly useful : Meta-Analysis: Combining data multiple studies individual-level data available Literature-Based Modeling: Fitting models published summary statistics Simulation Studies: Evaluating model performance aggregate data Population PK/PD: Fitting complex models summary-level data","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Aggregate Data Modelling in R","text":"Check documentation Browse GitHub issues Create new issue reproducible example","code":""},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Aggregate Data Modelling in R","text":"use admr research, please cite :","code":"citation(\"admr\")"},{"path":"https://vanhasseltlab.github.io/admr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Aggregate Data Modelling in R","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/admr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admr: Aggregate data modelling in R — admr-package","title":"admr: Aggregate data modelling in R — admr-package","text":"novel method aggregate data model using non-linear estimation techniques.","code":""},{"path":[]},{"path":"https://vanhasseltlab.github.io/admr/reference/admr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admr: Aggregate data modelling in R — admr-package","text":"H. van de Beek P..J. Välitalo","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/examplomycin.html","id":null,"dir":"Reference","previous_headings":"","what":"Examplomycin Dataset — examplomycin","title":"Examplomycin Dataset — examplomycin","text":"simulated dataset fictional drug examplomycin. dataset contains 500 subjects, 9 timepoints. generated using two-compartment pharmacokinetic model first-order absorption elimination. Random effects residual errors included simulate variability noise.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/examplomycin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examplomycin Dataset — examplomycin","text":"","code":"examplomycin"},{"path":"https://vanhasseltlab.github.io/admr/reference/examplomycin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Examplomycin Dataset — examplomycin","text":"data frame 4500 rows 6 variables: ID: Subject ID. TIME: Observation time (hours). DV: Observed drug concentration (mg/L). AMT: Amount drug administered (mg). EVID: Event type indicator (0 observation, 101 dosing). CMT: Compartment number (1 depot, 2 central).","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/examplomycin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Examplomycin Dataset — examplomycin","text":"Generated using generate_data function.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/examplomycin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examplomycin Dataset — examplomycin","text":"","code":"#' # Load required libraries library(admr)  # Load the dataset data(\"examplomycin\")  # View the first few rows head(examplomycin) #>    ID TIME    DV AMT EVID CMT #> 1 460 0.00 0.000 100  101   1 #> 2 460 0.10 0.752   0    0   2 #> 3 460 0.25 1.932   0    0   2 #> 4 460 0.50 3.694   0    0   2 #> 5 460 1.00 3.479   0    0   2 #> 6 460 2.00 4.003   0    0   2"},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"fitIRMC implements Iterative Reweighting (IRMC) algorithm parameter estimation aggregate data models, iterating maximum likelihood updates weighted Monte Carlo updates. function uses nloptr instead optimx optimization includes additional features like multiple chains phase-based optimization.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"","code":"fitIRMC(   opts,   obs,   maxiter = 100,   convcrit_nll = 1e-05,   single_dataframe = TRUE,   phase_fractions = c(0.2, 0.4, 0.2, 0.2),   max_worse_iterations = 10,   chains = 1,   perturbation = 0.1,   seed = 1 )"},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"opts list model options generated genopts(). Contains settings model, including prediction function, time points, parameter structure, simulation settings. obs Observed data aggregate form (mean covariance) matrix raw data. maxiter Maximum number iterations optimization algorithm. Default 100. convcrit_nll Convergence criterion negative log-likelihood. algorithm stops relative change negative log-likelihood less value. Default 1e-05. single_dataframe Logical indicating whether use single data frame (TRUE) multiple data frames (FALSE). Default TRUE. phase_fractions Vector fractions optimization phase. sum 1. Default c(0.2, 0.4, 0.2, 0.2). max_worse_iterations Maximum number consecutive worse iterations skipping phase. Default 10. chains Number chains run. Default 1. perturbation Perturbation factor initial parameter values chain. Default 0.1. seed Random seed reproducibility. Default 1.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"object class fit_admr_result containing: p: List parameter estimates iteration nll: Negative log-likelihood values time: Computation time iteration iter: Iteration number chain: Chain number (multiple chains used) phase: Optimization phase number","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"function uses Iterative Reweighting algorithm Monte Carlo sampling optimization. includes several advanced features: Multiple optimization phases different convergence criteria Chains perturbed starting values Phase-based optimization automatic phase skipping Convergence checking based likelihood parameter stationarity optimization process divided phases, convergence criteria settings. algorithm can automatically skip phases optimization progressing.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitIRMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — fitIRMC","text":"","code":"# Load required libraries library(admr) library(rxode2) #> rxode2 4.1.1 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` library(nlmixr2) #> ── Attaching packages ───────────────────────────────────────── nlmixr2 4.0.1 ── #> ✔ lotri        1.0.2     ✔ nlmixr2extra 3.0.2 #> ✔ nlmixr2data  2.0.9     ✔ nlmixr2plot  3.0.3 #> ✔ nlmixr2est   4.1.1      #> ── Optional Packages Loaded/Ignored ─────────────────────────── nlmixr2 4.0.1 ── #> ✖ babelmixr2     ✖ nonmem2rx #> ✖ ggPMX     ✖ posologyr #> ✖ monolix2rx     ✖ shinyMixR #> ✖ nlmixr2lib     ✖ xpose.nlmixr2 #> ✖ nlmixr2rpt      #> ── Conflicts ───────────────────────────────────────────── nlmixr2conflicts() ── #> ✖ nlmixr2est::boxCox()     masks rxode2::boxCox() #> ✖ nlmixr2est::yeoJohnson() masks rxode2::yeoJohnson() library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tidyr) library(mnorm)  # Load and prepare data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’   # Define prediction function predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)   cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                       byrow = TRUE)   return(cp_matrix) }  # Create options opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),     Omega = matrix(c(0.09, 0, 0, 0, 0,                      0, 0.09, 0, 0, 0,                      0, 0, 0.09, 0, 0,                      0, 0, 0, 0.09, 0,                      0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),     Sigma_prop = 0.04   ),   nsim = 2500,   n = 500,   fo_appr = FALSE,   omega_expansion = 1,   f = predder )  # Run optimization result <- fitIRMC(opts, examplomycin_aggregated) #> Chain 1: #> Iter | NLL and Parameters (11 values) #> -------------------------------------------------------------------------------- #>    1: -1838.838    1.609    2.303    3.401    2.303    0.000   -2.408   -2.408   -2.408   -2.408   -2.408   -3.219 #>  #> ### Wide Search Phase ### #>    2: -1845.016    1.601    2.326    3.396    2.283    0.036   -2.258   -2.079   -2.314   -2.176   -2.501   -3.236 #>    3: -1845.327    1.601    2.312    3.402    2.285    0.024   -2.275   -2.165   -2.335   -2.237   -2.443   -3.235 #>    4: -1845.319    1.601    2.314    3.402    2.285    0.025   -2.273   -2.155   -2.331   -2.231   -2.451   -3.235 #>    5: -1845.319    1.601    2.314    3.402    2.285    0.025   -2.273   -2.156   -2.332   -2.231   -2.451   -3.235 #>    6: -1845.319    1.601    2.314    3.402    2.285    0.025   -2.273   -2.156   -2.332   -2.231   -2.451   -3.235 #> Phase Wide Search Phase converged at iteration 6. #>  #> ### Focussed Search Phase ### #>    7: -1845.318    1.601    2.315    3.401    2.285    0.026   -2.273   -2.155   -2.332   -2.228   -2.451   -3.235 #>    8: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>    9: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   10: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   11: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   12: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   13: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   14: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   15: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   16: -1845.319    1.601    2.315    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #> Phase Focussed Search Phase converged at iteration 16. #>  #> ### Fine-Tuning Phase ### #>   17: -1845.317    1.601    2.315    3.401    2.285    0.026   -2.273   -2.154   -2.333   -2.229   -2.453   -3.235 #>   18: -1845.319    1.601    2.314    3.402    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   19: -1845.319    1.601    2.314    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   20: -1845.319    1.601    2.314    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #> Phase Fine-Tuning Phase converged at iteration 20. #>  #> ### Precision Phase ### #>   21: -1845.318    1.601    2.315    3.401    2.285    0.026   -2.273   -2.155   -2.333   -2.229   -2.451   -3.235 #>   22: -1845.319    1.601    2.314    3.401    2.285    0.025   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   23: -1845.319    1.601    2.314    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   24: -1845.319    1.601    2.314    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #>   25: -1845.319    1.601    2.314    3.401    2.285    0.026   -2.273   -2.156   -2.333   -2.230   -2.451   -3.235 #> Phase Precision Phase converged at iteration 25. #>  #> Chain 1 Complete: Final NLL = -1845.327, Time Elapsed = 13.24 seconds #>   print(result) #> -- FitIRMC Summary -- #>  #> -- Objective Function and Information Criteria -- #>  Log-likelihood: -1845.3269 #>             AIC: 3701.65 #>             BIC: 3759.01 #> Condition#(Cov): 119.25 #> Condition#(Cor): 162.82 #>  #> -- Timing Information -- #>      Best Chain: 13.2449 seconds #>      All Chains: 13.2475 seconds #>      Covariance: 14.0391 seconds #>         Elapsed: 27.29 seconds #>  #> -- Population Parameters -- #> # A tibble: 6 × 6 #>   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` #>   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> #> 1 cl             1.60    0.0152   0.947 4.96 (4.81, 5.11)               32.1 #> 2 v1             2.31    0.0758   3.28  10.10 (8.71, 11.72)             33.9 #> 3 v2             3.40    0.0371   1.09  30.03 (27.93, 32.30)            31.1 #> 4 q              2.28    0.0212   0.926 9.82 (9.43, 10.24)              32.7 #> 5 ka             0.0237  0.0712 300.    1.02 (0.89, 1.18)               29.5 #> 6 Residual Error 0.0393 NA       NA     0.0393                          NA   #>  #> -- Iteration Diagnostics -- #>  Iter | NLL and Parameters #> -------------------------------------------------------------------------------- #>    1: -1838.838 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    2: -1845.016 1.601 2.326 3.396 2.283 0.036 -2.258 -2.079 -2.314 -2.176 -2.501 -3.236 #>    3: -1845.327 1.601 2.312 3.402 2.285 0.024 -2.275 -2.165 -2.335 -2.237 -2.443 -3.235 #>    4: -1845.319 1.601 2.314 3.402 2.285 0.025 -2.273 -2.155 -2.331 -2.231 -2.451 -3.235 #>    5: -1845.319 1.601 2.314 3.402 2.285 0.025 -2.273 -2.156 -2.332 -2.231 -2.451 -3.235 #>    ... (omitted iterations) ... #>   21: -1845.318 1.601 2.315 3.401 2.285 0.026 -2.273 -2.155 -2.333 -2.229 -2.451 -3.235 #>   22: -1845.319 1.601 2.314 3.401 2.285 0.025 -2.273 -2.156 -2.333 -2.230 -2.451 -3.235 #>   23: -1845.319 1.601 2.314 3.401 2.285 0.026 -2.273 -2.156 -2.333 -2.230 -2.451 -3.235 #>   24: -1845.319 1.601 2.314 3.401 2.285 0.026 -2.273 -2.156 -2.333 -2.230 -2.451 -3.235 #>   25: -1845.319 1.601 2.314 3.401 2.285 0.026 -2.273 -2.156 -2.333 -2.230 -2.451 -3.235 #>"},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"fitMC implements bobyqa algorithm parameter estimation aggregate data models, iterating maximum likelihood updates Monte Carlo updates. iteration creates new Monte Carlo samples updates parameter values. function used compare performance different implementations aggregate data modeling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"","code":"fitMC(   opts,   obs,   maxiter = 5000,   convcrit_nll = 1e-05,   single_dataframe = TRUE,   chains = 1,   perturbation = 0.1,   seed = 1 )"},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"opts list model options generated genopts(). Contains settings model, including prediction function, time points, parameter structure, simulation settings. obs Observed data aggregate form (mean covariance) matrix raw data. maxiter Maximum number iterations optimization algorithm. Default 100. convcrit_nll Convergence criterion negative log-likelihood. algorithm stops relative change negative log-likelihood less value. Default 1e-05. single_dataframe Logical indicating whether use single data frame (TRUE) multiple data frames (FALSE). Default TRUE. chains Number chains run. Default 1. perturbation Perturbation factor initial parameter values chain. Default 0.1. seed Random seed reproducibility. Default 1.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"object class fit_admr_result containing: p: List parameter estimates iteration nll: Negative log-likelihood values time: Computation time iteration iter: Iteration number chain: Chain number (used standard MC algorithm) phase: Optimization phase number","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"function uses Monte Carlo algorithm Monte Carlo sampling optimization. optimization process performed using bobyqa algorithm, suitable non-linear optimization problems. function supports single multiple data frames, allowing flexibility observed data structured.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/fitMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — fitMC","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)  # Load and prepare data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’  # Define prediction function predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)   cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                       byrow = TRUE)   return(cp_matrix) }  # Create options opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),     Omega = matrix(c(0.09, 0, 0, 0, 0,                      0, 0.09, 0, 0, 0,                      0, 0, 0.09, 0, 0,                      0, 0, 0, 0.09, 0,                      0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),     Sigma_prop = 0.04   ),   nsim = 2500,   n = 500,   fo_appr = FALSE,   omega_expansion = 1.2,   f = predder )  # Run optimization result <- fitMC(opts, examplomycin_aggregated) #> Iteration: 50 - NLL: -1842.696  #> Iteration: 100 - NLL: -1844.847  #> Iteration: 150 - NLL: -1845.222  #> Iteration: 200 - NLL: -1845.259  #> Iteration: 250 - NLL: -1845.269  #> Iteration: 300 - NLL: -1845.277  #> Iteration: 350 - NLL: -1845.286  #> Iteration: 400 - NLL: -1845.287  #> Iteration: 450 - NLL: -1845.288  #> Iteration: 500 - NLL: -1845.289  #> Iteration: 550 - NLL: -1845.289  #> Iteration: 600 - NLL: -1845.289  #> Iteration: 650 - NLL: -1845.29  #> Iteration: 700 - NLL: -1845.29  #>  #> Chain 1 Complete: Final NLL = -1845.290, Time Elapsed = 130.81 seconds #>   print(result) #> -- FitIRMC Summary -- #>  #> -- Objective Function and Information Criteria -- #>  Log-likelihood: -1845.2898 #>             AIC: 3701.58 #>             BIC: 3758.94 #> Condition#(Cov): 234.94 #> Condition#(Cor): 363.36 #>  #> -- Timing Information -- #>      Best Chain: 130.8111 seconds #>      All Chains: 130.8136 seconds #>      Covariance: 32.9186 seconds #>         Elapsed: 163.73 seconds #>  #> -- Population Parameters -- #> # A tibble: 6 × 6 #>   Parameter        Est.      SE  `%RSE` `Back-transformed(95%CI)` `BSV(CV%)` #>   <chr>           <dbl>   <dbl>   <dbl> <chr>                          <dbl> #> 1 cl             1.60    0.0156   0.975 4.96 (4.81, 5.11)               31.9 #> 2 v1             2.31    0.110    4.77  10.11 (8.14, 12.55)             32.7 #> 3 v2             3.40    0.0475   1.40  30.05 (27.38, 32.98)            31.1 #> 4 q              2.28    0.0214   0.938 9.82 (9.42, 10.25)              32.2 #> 5 ka             0.0237  0.105  444.    1.02 (0.83, 1.26)               30.6 #> 6 Residual Error 0.0394 NA       NA     0.0394                          NA   #>  #> -- Iteration Diagnostics -- #>  Iter | NLL and Parameters #> -------------------------------------------------------------------------------- #>    1: -1839.577 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    2: -1839.577 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    3: -1839.577 1.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    4: 14056.804 2.609 2.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    5: 5028.744 1.609 3.303 3.401 2.303 0.000 -2.408 -2.408 -2.408 -2.408 -2.408 -3.219 #>    ... (omitted iterations) ... #>  704: -1845.290 1.601 2.313 3.403 2.285 0.024 -2.286 -2.238 -2.339 -2.267 -2.368 -3.235 #>  705: -1845.290 1.601 2.313 3.403 2.285 0.024 -2.286 -2.238 -2.339 -2.267 -2.368 -3.235 #>  706: -1845.290 1.601 2.313 3.403 2.285 0.024 -2.286 -2.238 -2.339 -2.267 -2.368 -3.235 #>  707: -1845.290 1.601 2.313 3.403 2.285 0.024 -2.286 -2.238 -2.339 -2.267 -2.368 -3.235 #>  708: -1845.290 1.601 2.313 3.403 2.285 0.024 -2.286 -2.238 -2.339 -2.267 -2.368 -3.235 #>"},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expected population-level mean and covariance — gen_pop_EV","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"gen_pop_EV computes expected population-level mean covariance model predictions using either first-order approximation (FO) Monte Carlo (MC) methods. function core component aggregate data modeling framework, used generate expected values model fitting optimization.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"","code":"gen_pop_EV(opts)"},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"opts list model options generated genopts(). Contains settings model, including: Prediction function (f) Time points prediction Population parameters (beta) -subject variability (Omega) Method selection (fo_appr) Number Monte Carlo samples (nsim) Omega expansion factor","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"list containing: E: Expected mean model predictions time point V: Expected covariance matrix predictions across time points","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"function implements two methods computing population expectations: First-Order (FO) Approximation (opts$fo_appr TRUE): Uses linearization around random effects (η) Steps: . Generate random effects samples b. Compute importance sampling weights based η distribution c. individual: Compute FOCE approximation mean covariance Apply importance sampling weights d. Combine weighted results across individuals Advantages: Computationally efficient complex models Good accuracy nearly linear systems Used : Number Monte Carlo samples small (nsim < 10) Model approximately linear random effects Monte Carlo (MC) Approximation (opts$fo_appr FALSE): Uses direct simulation estimate expectations Steps: . Generate random effects samples b. Compute full model predictions sample c. Calculate empirical mean covariance d. Apply importance sampling omega expansion used Advantages: linearization assumptions accurate highly nonlinear models Used : Sufficient Monte Carlo samples available High accuracy required Model highly nonlinear choice methods depends : Model complexity nonlinearity Required accuracy Computational resources Number available Monte Carlo samples","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gen_pop_EV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute expected population-level mean and covariance — gen_pop_EV","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)   # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>    # Define prediction function for a two-compartment model predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    # Create event table for dosing and sampling   ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    # Solve ODE system   out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)    # Return matrix of predictions   matrix(out$cp, nrow = n_individuals, ncol = length(time), byrow = TRUE) }  # Create options for a two-compartment model opts <- genopts(   f = predder,   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     # Population parameters (fixed effects)     beta = c(cl = 5,    # Clearance (L/h)             v1 = 10,    # Central volume (L)             v2 = 30,    # Peripheral volume (L)             q = 10,     # Inter-compartmental clearance (L/h)             ka = 1),    # Absorption rate (1/h)      # Between-subject variability (30% CV on all parameters)     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),      # Residual error (30% CV)     Sigma_prop = 0.04   ),   nsim = 2500,  # Number of Monte Carlo samples   n = 2500,      # Number of individuals   fo_appr = FALSE  # Use Monte Carlo approximation )  # Generate population expectations ev <- gen_pop_EV(opts)"},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a simulated dataset — gendataset","title":"Generate a simulated dataset — gendataset","text":"gendataset generates simulated dataset based model structure random effects specified options. function can generate data either raw format nlmixr format, optional residual error.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a simulated dataset — gendataset","text":"","code":"gendataset(opts, seed = 1, reserr = TRUE, nlmixrform = FALSE)"},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a simulated dataset — gendataset","text":"opts list model options generated genopts(). Contains settings model, including prediction function, time points, parameter structure, simulation settings. seed Random seed reproducibility. Default 1. reserr Logical indicating whether add residual error simulated data. Default TRUE. nlmixrform Logical indicating whether return data nlmixr format. TRUE, returns data frame columns: dv, time, id, amt, evid, cmt. FALSE, returns matrix simulated observations. Default FALSE.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a simulated dataset — gendataset","text":"nlmixrform FALSE, returns matrix simulated observations dimensions nsim x length(time). nlmixrform TRUE, returns data frame nlmixr format columns: dv: Dependent variable (e.g., concentration measurements) time: Observation time points id: Subject identifier amt: Dose amount (NA observations, typically mg) evid: Event identifier (101 dosing, 0 observation) cmt: Compartment number (1 depot/dosing, 2 central/observation)","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a simulated dataset — gendataset","text":"function generates simulated data following steps: Generating random effects (η) multivariate normal distribution Computing individual parameters (θᵢ) using log-normal transformations Simulating concentration-time profiles using prediction function Adding residual error components requested: - Proportional error: y = f(t,θ)(1 + ε), ε ~ N(0,σ²_prop) - Additive error: y = f(t,θ) + ε, ε ~ N(0,σ²_add) Formatting output either raw matrix nlmixr-compatible format residual error model can include: Proportional error (specified Sigma_prop) Additive error (specified Sigma_add) Combined error model (Sigma_prop Sigma_add) function supports reproducible simulations seed parameter compatible population PK modeling simulation workflows.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/gendataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a simulated dataset — gendataset","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>    # Define prediction function for a two-compartment model predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    # Create event table for dosing and sampling   ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    # Solve ODE system   out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)    # Return matrix of predictions   matrix(out$cp, nrow = n_individuals, ncol = length(time), byrow = TRUE) }  # Create options for a two-compartment model opts <- genopts(   f = predder,   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     # Population parameters (fixed effects)     beta = c(cl = 5,    # Clearance (L/h)             v1 = 10,    # Central volume (L)             v2 = 30,    # Peripheral volume (L)             q = 10,     # Inter-compartmental clearance (L/h)             ka = 1),    # Absorption rate (1/h)      # Between-subject variability (30% CV on all parameters)     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),      # Residual error (20% CV)     Sigma_prop = 0.04   ),   nsim = 2500,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE  # Use Monte Carlo approximation )  # Generate a dataset with 100 individuals dataset <- gendataset(opts, n = 100)"},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a fitting function for optimization — genfitfunc","title":"Generate a fitting function for optimization — genfitfunc","text":"genfitfunc generates fitting function optimization computes negative log-likelihood model given observed data current parameter estimates. function handles raw data aggregate data (mean covariance) formats.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a fitting function for optimization — genfitfunc","text":"","code":"genfitfunc(opts, obs)"},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a fitting function for optimization — genfitfunc","text":"opts list model options generated genopts(). Contains settings model, including: f: Prediction function model time: Vector observation times p: List parameter values structure nsim: Number Monte Carlo samples n: Number individuals pt: Parameter values transformed scale ptrans: Parameter transformation function obs Observed data one two formats: 1. Aggregate form: List elements: - E: Vector means time point - V: Covariance matrix observations 2. Raw data matrix: - Rows: Individual observations (nsim) - Columns: Time points","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a fitting function for optimization — genfitfunc","text":"function signature function(p, givedetails = FALSE, opts_overrides) : p: Parameter values (transformed untransformed) givedetails: TRUE, returns additional attributes: - EV: Expected values (mean covariance) - obs: Observed data - nllfun: Negative log-likelihood function - opts: Model options used opts_overrides: Optional list override model options Returns: Negative log-likelihood value","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a fitting function for optimization — genfitfunc","text":"Algorithm Steps: Data Preparation: Validates input data format Converts raw data aggregate form needed Uses expected data observations provided Parameter Processing: Handles transformed untransformed parameters Updates model options current parameters Likelihood Computation: Generates expected values using gen_pop_EV Computes covariance matrix inverse Calculates negative log-likelihood Error Handling: Checks matrix inversion problems Validates data dimensions Ensures proper parameter transformations Mathematical Details: Negative Log-Likelihood: $$-2\\log L = n\\log|V| + (y - \\mu)^T V^{-1} (y - \\mu)$$ : - n: Number individuals - V: Model-predicted covariance matrix - y: Observed means - μ: Model-predicted means Parameter Transformations: - Log transform positive parameters - Logit transform bounded parameters - Identity unrestricted parameters","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genfitfunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a fitting function for optimization — genfitfunc","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)   # Load and prepare data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>    # Define prediction function for a two-compartment model predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    # Create event table for dosing and sampling   ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    # Solve ODE system   out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)    # Return matrix of predictions   matrix(out$cp, nrow = n_individuals, ncol = length(time), byrow = TRUE) }  # Create options for a two-compartment model opts <- genopts(   f = predder,   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     # Population parameters (fixed effects)     beta = c(cl = 5,    # Clearance (L/h)             v1 = 10,    # Central volume (L)             v2 = 30,    # Peripheral volume (L)             q = 10,     # Inter-compartmental clearance (L/h)             ka = 1),    # Absorption rate (1/h)      # Between-subject variability (30% CV on all parameters)     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),      # Residual error (20% CV)     Sigma_prop = 0.04   ),   nsim = 2500,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE  # Use Monte Carlo approximation )  # Generate objective function for optimization objfun <- genfitfunc(opts, examplomycin_aggregated)  # Test the objective function with initial parameters init_params <- opts$p nll <- objfun(init_params)"},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate options for aggregate data modeling — genopts","title":"Generate options for aggregate data modeling — genopts","text":"genopts initializes generates core options settings aggregate data modeling optimization. creates comprehensive options object contains necessary information model fitting, including random effects, simulation settings, likelihood approximations. function main entry point setting aggregate data modeling package.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate options for aggregate data modeling — genopts","text":"","code":"genopts(   f,   time,   p,   h,   nsim = 1,   n = 30,   adist = NULL,   interact = TRUE,   fo_appr = (nsim < 10),   biseq = NA,   omega_expansion = 1,   single_betas = NA,   p_thetai = function(p, origbeta, bi) {      dmnorm(bi, mean = log(p$beta/origbeta),     sigma = p$Omega, log = TRUE)$den  },   g = function(beta, bi = rep(0, length(beta)), ai) { beta * exp(bi)  },   no_cov = F )"},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate options for aggregate data modeling — genopts","text":"f prediction function simulates model output given parameters time points. function signature function(time, theta_i, ...) : time: Vector time points theta_i: Matrix individual parameters Returns: Matrix predictions time Vector time points evaluate model predictions. p List containing initial parameter values structure: beta: Vector population parameters (fixed effects) Omega: Covariance matrix random effects (-subject variability) Sigma_prop: Proportional error variance (optional) Sigma_add: Additive error variance (optional) h error function computes variance predictions. provided, default function used adds proportional additive error components. nsim Number Monte Carlo samples per iteration. Default 1. n Number individuals dataset. Used OFV, AIC, BIC calculation. Default 30. adist Distribution random effects. Default NULL (normal distribution). interact Logical indicating whether use FOCEI interaction. Default TRUE. fo_appr Logical indicating whether use first-order approximation. Default TRUE nsim < 10, FALSE otherwise. biseq Sequence random effects. Default NA (generated internally). omega_expansion Factor expand covariance matrix estimation. Default 1. single_betas Matrix beta parameters multiple models. Default NA. p_thetai Function compute log-density random effects. Default multivariate normal density. g Function transform population parameters individual parameters. Default exponential transformation. no_cov Logical indicating whether ignore covariance error model. Default FALSE.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate options for aggregate data modeling — genopts","text":"list containing: f: prediction function time: Time points evaluation p: Parameter structure initial values h: error function nsim: Number Monte Carlo samples n: Number individuals adist: Distribution random effects interact: FOCEI interaction flag fo_appr: First-order approximation flag biseq: Random effects sequence omega_expansion: Covariance expansion factor single_betas: Beta parameters multiple models p_thetai: Random effects density function g: Parameter transformation function pt: Transformed initial parameters ptrans: Function back-transform parameters pderiv: Function compute parameter derivatives d_g_d_beta: Derivative g respect beta d_g_d_bi: Derivative g respect random effects d_bi_d_omega: Derivative random effects respect Omega d_omega_d_Omega: Derivative transformed Omega respect untransformed no_cov: Logical indicating whether ignore covariance","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate options for aggregate data modeling — genopts","text":"function performs several key operations: Parameter Transformation: - Converts parameters optimization scale - Computes derivatives optimization - Handles fixed parameters Random Effects Generation: - Uses Sobol sequences quasi-random sampling - Applies normal quantile transformation - Supports custom distributions Error Function Setup: - Handles proportional error: y = f(t,θ)(1 + ε) - Handles additive error: y = f(t,θ) + ε - Combines error types Key features: Automatic derivative computation parameter transformations Support multiple models parameter structures Flexible error model specification Efficient random effects generation","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/genopts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate options for aggregate data modeling — genopts","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)   # Define prediction function for a two-compartment model predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    # Create event table for dosing and sampling   ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    # Solve ODE system   out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)    # Return matrix of predictions   matrix(out$cp, nrow = n_individuals, ncol = length(time), byrow = TRUE) }  # Create options for a two-compartment model opts <- genopts(   f = predder,   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     # Population parameters (fixed effects)     beta = c(cl = 5,    # Clearance (L/h)             v1 = 10,    # Central volume (L)             v2 = 30,    # Peripheral volume (L)             q = 10,     # Inter-compartmental clearance (L/h)             ka = 1),    # Absorption rate (1/h)      # Between-subject variability (30% CV on all parameters)     Omega = matrix(c(0.09, 0, 0, 0, 0,                     0, 0.09, 0, 0, 0,                     0, 0, 0.09, 0, 0,                     0, 0, 0, 0.09, 0,                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),      # Residual error (20% CV)     Sigma_prop = 0.04   ),   nsim = 2500,  # Number of Monte Carlo samples   n = 500,      # Number of individuals   fo_appr = FALSE,  # Use Monte Carlo approximation   omega_expansion = 1.2  # Expand covariance during estimation )"},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean and covariance of a matrix — meancov","title":"Compute mean and covariance of a matrix — meancov","text":"meancov computes mean covariance matrix, optionally weights. function used convert raw data aggregate form (mean covariance) use aggregate data modeling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean and covariance of a matrix — meancov","text":"","code":"meancov(m, wt)"},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean and covariance of a matrix — meancov","text":"m numeric matrix data frame containing observations. row represents individual, column represents time point. pharmacometric data, columns typically represent concentration measurements different time points. wt Optional vector weights observation. provided, observations weighted equally. Weights can used account different sample sizes reliability different data sources.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean and covariance of a matrix — meancov","text":"list containing: E: Vector means time point (population typical values) V: Covariance matrix representing variability individuals","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute mean and covariance of a matrix — meancov","text":"function computes: mean column (time point) using colMeans unweighted data weighted means weighted data covariance matrix using cov.wt maximum likelihood estimation, provides unbiased estimates population covariance maximum likelihood estimation method used : provides unbiased estimates covariance matrix appropriate aggregate data modeling want estimate population parameters handles balanced unbalanced designs optional weights Key features: Handles missing data automatically underlying cov.wt function Provides numerically stable computations Can used raw PK data simulated data Supports weighted calculations meta-analysis combined analysis","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/meancov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute mean and covariance of a matrix — meancov","text":"","code":"# Load required libraries library(admr) library(rxode2)  # Create a matrix of concentration measurements # 10 subjects measured at 10 time points m <- matrix(rnorm(100), nrow = 10, ncol = 10)  # Compute unweighted mean and covariance # Useful for single-study analysis result <- meancov(m)  # Compute weighted mean and covariance # Useful for meta-analysis or when combining studies weights <- runif(10)  # weights could represent study sizes result_weighted <- meancov(m, weights)"},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"omegas creates covariance matrix specified diagonal -diagonal values. function useful creating initial fixed covariance matrices random effects pharmacometric models.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"","code":"omegas(diag, offdiag, n_om)"},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"diag Value diagonal elements matrix. represents variance random effect. log-normal distributions, typically squared coefficient variation (CV²) log scale. offdiag Value -diagonal elements matrix. represents covariance random effects. value 0 indicates independence random effects. n_om Size matrix (number random effects). match number random effects model (e.g., 2 CL V one-compartment model).","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"symmetric matrix size n_om x n_om : Diagonal elements equal diag (variances) -diagonal elements equal offdiag (covariances)","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"function creates symmetric covariance matrix random effects : Diagonal elements (ω²) represent -subject variability -diagonal elements (ω_ij) represent correlations parameters resulting matrix must positive definite valid computations Common use cases include: Initial estimates model fitting: - Setting diagonal elements expected variability (e.g., 0.09 30% CV) - Starting zero correlations (offdiag = 0) Simulation studies: - Specifying known parameter variability - Testing impact parameter correlations Sensitivity analysis: - Evaluating model behavior different variability assumptions - Assessing impact parameter correlations Mathematical details: log-normal distributions: CV ≈ sqrt(exp(ω²) - 1) Correlation ρ_ij = ω_ij / sqrt(ω_ii * ω_jj) Matrix must positive definite: eigenvalues > 0","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/omegas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a covariance matrix with specified diagonal and off-diagonal values — omegas","text":"","code":"# Load required libraries library(admr) library(rxode2)  # Create a diagonal matrix for a one-compartment model # 30% CV on CL and V (ω² = 0.09 for each) omega1 <- omegas(0.09, 0, 2)  # Create a matrix with correlations for a two-compartment model # 30% CV on all parameters (CL, V1, Q, V2) # Correlation of 0.3 between parameters omega2 <- omegas(0.09, 0.03, 4)  # Create a matrix for testing parameter correlations # High variability (50% CV, ω² = 0.25) and strong correlations (0.1) omega3 <- omegas(0.25, 0.1, 3)"},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert parameters to optimizable form — p_to_optim","title":"Convert parameters to optimizable form — p_to_optim","text":"p_to_optim converts parameter list form suitable optimization transforming parameters computing derivatives. function handles transformation fixed random effect parameters.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert parameters to optimizable form — p_to_optim","text":"","code":"p_to_optim(p)"},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert parameters to optimizable form — p_to_optim","text":"p list containing parameter structure: beta: Vector population parameters (fixed effects) e.g., clearance (CL), volume (V), absorption rate (ka) Omega: Covariance matrix random effects (-subject variability) diagonal elements variances, -diagonal covariances Sigma_prop: Proportional error variance (optional) represents CV² residual error Sigma_add: Additive error variance (optional) represents constant error magnitude","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert parameters to optimizable form — p_to_optim","text":"list containing: values: Vector transformed parameter values optimization scale backtransformfunc: Function convert optimized values back original scale d_psi_d_psitrans_long: Function computing long-form parameter derivatives d_psi_d_psitrans_short: Function computing short-form parameter derivatives d_bi_d_omega: Derivatives random effects respect Omega elements d_omega_d_Omega: Derivatives transformed Omega respect untransformed","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert parameters to optimizable form — p_to_optim","text":"Parameter Transformations: Population Parameters (beta): - Log transformation positive parameters - Identity transformation unrestricted parameters - Logit transformation parameters bounded 0 1 Variance Components (Omega diagonal): - Log transformation ensure positivity - Typically represents -subject variability Correlation Components (Omega -diagonal): - Inverse hyperbolic tangent (atanh) transformation - Ensures correlations remain -1 1 Residual Error (Sigma): - Log transformation variance parameters - Handles proportional additive error structures Derivative Computations: First-order derivatives optimization algorithms Chain rule applied composed transformations Separate handling variance correlation parameters Support dense sparse matrices Special Features: Handles fixed parameters (specified character strings) Preserves parameter names throughout transformations Automatic conversion exponential error proportional Validates parameter values transformations","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/p_to_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert parameters to optimizable form — p_to_optim","text":"","code":"# Load required libraries library(admr) library(rxode2)  # Define a two-compartment model parameters p <- list(   # Population parameters (fixed effects)   beta = c(cl = 5,    # Clearance (L/h)           v1 = 10,    # Central volume (L)           v2 = 30,    # Peripheral volume (L)           q = 10,     # Inter-compartmental clearance (L/h)           ka = 1),    # Absorption rate (1/h)    # Between-subject variability (30% CV on all parameters)   Omega = matrix(c(0.09, 0, 0, 0, 0,                   0, 0.09, 0, 0, 0,                   0, 0, 0.09, 0, 0,                   0, 0, 0, 0.09, 0,                   0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),    # Residual error (20% CV)   Sigma_prop = 0.04 )  # Convert to optimization scale p_optim <- p_to_optim(p)  # Back-transform to original scale p_orig <- p_optim$backtransformfunc(p_optim$values)"},{"path":"https://vanhasseltlab.github.io/admr/reference/plot.fit_admr_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics of fitIRMC results — plot.fit_admr_result","title":"Plot diagnostics of fitIRMC results — plot.fit_admr_result","text":"Plot diagnostics fitIRMC results","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/plot.fit_admr_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics of fitIRMC results — plot.fit_admr_result","text":"","code":"# S3 method for class 'fit_admr_result' plot(x, ...)"},{"path":"https://vanhasseltlab.github.io/admr/reference/plot.fit_admr_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics of fitIRMC results — plot.fit_admr_result","text":"x fitted model object returned fitIRMC ... Additional arguments (used)","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/print.fit_admr_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print fitIRMC results — print.fit_admr_result","title":"Print fitIRMC results — print.fit_admr_result","text":"Print fitIRMC results","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/print.fit_admr_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print fitIRMC results — print.fit_admr_result","text":"","code":"# S3 method for class 'fit_admr_result' print(x, ...)"},{"path":"https://vanhasseltlab.github.io/admr/reference/print.fit_admr_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print fitIRMC results — print.fit_admr_result","text":"x fitted model object returned fitIRMC ... Additional arguments (used)","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"timedIRMC implements Iterative Reweighting (IRMC) algorithm parameter estimation aggregate data models, iterating maximum likelihood updates weighted Monte Carlo updates. function used compare performance different implementations aggregate data modeling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"","code":"timedIRMC(init, opts, obs, maxiter = 100, convcrit_nll = 5e-04, nomap = TRUE)"},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"init Initial parameter values optimization. transformed parameters generated opts$pt. opts list model options generated genopts(). Contains settings model, including prediction function, time points, parameter structure, simulation settings. obs Observed data aggregate form (mean covariance) matrix raw data. maxiter Maximum number iterations optimization algorithm. Default 100. convcrit_nll Convergence criterion negative log-likelihood. algorithm stops relative change negative log-likelihood less value. Default 5e-04. nomap Logical indicating whether use multiple models (FALSE) single model (TRUE). Default TRUE.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"data frame containing: p: List parameter estimates iteration nll: Negative log-likelihood values time: Computation time iteration iter: Iteration number","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"function uses Iterative Reweighting algorithm Monte Carlo sampling optimization. iteration, generates Monte Carlo samples updates parameter estimates using weighted importance sampling. algorithm continues convergence maximum number iterations reached.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedIRMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit aggregate data using Iterative Reweighting with Monte Carlo updates — timedIRMC","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)  # Load and prepare data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>    # Define prediction function predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)   cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                       byrow = TRUE)   return(cp_matrix) }  # Create options opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),     Omega = matrix(c(0.09, 0, 0, 0, 0,                      0, 0.09, 0, 0, 0,                      0, 0, 0.09, 0, 0,                      0, 0, 0, 0.09, 0,                      0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),     Sigma_prop = 0.04   ),   nsim = 2500,   n = 500,   fo_appr = FALSE,   omega_expansion = 1.2,   f = predder )  # Run optimization result <- timedIRMC(opts$pt, opts, examplomycin_aggregated) #> iteration 1, nll=-1839.57745906232 #> iteration 2, nll=-1845.23729552787 #> iteration 3, nll=-1845.27995577506 #> iteration 4, nll=-1845.28009970217 #> should break now due to no difference between OFV and appr OFV print(result) #> # A tibble: 4 × 5 #>   p             nll appr_nll time                 iter #>   <list>      <dbl>    <dbl> <dttm>              <dbl> #> 1 <dbl [11]> -1840.   -1840. 2025-10-27 14:07:30     1 #> 2 <dbl [11]> -1845.   -1845. 2025-10-27 14:07:31     2 #> 3 <dbl [11]> -1845.   -1845. 2025-10-27 14:07:32     3 #> 4 <dbl [11]> -1845.   -1845. 2025-10-27 14:07:32     4"},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"timedbobyqa implements bobyqa algorithm parameter estimation aggregate data models, iterating maximum likelihood updates Monte Carlo updates. iteration creates new Monte Carlo samples updates parameter values. function used compare performance different implementations aggregate data modeling.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"","code":"timedbobyqa(init, opts, obs, nomap = TRUE)"},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"init Initial parameter values optimization. transformed parameters generated opts$pt. opts list model options generated genopts(). Contains settings model, including prediction function, time points, parameter structure, simulation settings. obs Observed data aggregate form (mean covariance) matrix raw data. nomap Logical indicating whether use multiple models (FALSE) single model (TRUE). Default TRUE.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"data frame containing: p: List parameter estimates iteration nll: Negative log-likelihood values time: Computation time iteration iter: Iteration number","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"function uses bobyqa algorithm optimx package optimization. performs Monte Carlo sampling iteration update parameter estimates. algorithm continues convergence maximum number iterations reached.","code":""},{"path":"https://vanhasseltlab.github.io/admr/reference/timedbobyqa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit aggregate data using the bobyqa algorithm with Monte Carlo updates — timedbobyqa","text":"","code":"# Load required libraries library(admr) library(rxode2) library(nlmixr2) library(dplyr) library(tidyr) library(mnorm)  # Load and prepare data data(examplomycin) examplomycin_wide <- examplomycin %>%   filter(EVID != 101) %>%   dplyr::select(ID, TIME, DV) %>%   pivot_wider(names_from = TIME, values_from = DV) %>%   dplyr::select(-c(1))  # Create aggregated data examplomycin_aggregated <- examplomycin_wide %>%   admr::meancov()  # Define RxODE model rxModel <- function(){ model({   # Parameters   ke = cl / v1             # Elimination rate constant   k12 = q / v1             # Rate constant for central to peripheral transfer   k21 = q / v2             # Rate constant for peripheral to central transfer    # Differential equations   d/dt(depot)    = -ka * depot   d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral   d/dt(peripheral) = k12 * central - k21 * peripheral    # Concentration in central compartment   cp = central / v1 }) }  rxModel <- rxode2(rxModel) #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments rxModel <- rxModel$simulationModel #>   #>    # Define prediction function predder <- function(time, theta_i, dose = 100) {   n_individuals <- nrow(theta_i)   if (is.null(n_individuals)) n_individuals <- 1    ev <- eventTable(amount.units=\"mg\", time.units=\"hours\")   ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)   ev$add.sampling(time)    out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)   cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),                       byrow = TRUE)   return(cp_matrix) }  # Create options opts <- genopts(   time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),   p = list(     beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),     Omega = matrix(c(0.09, 0, 0, 0, 0,                      0, 0.09, 0, 0, 0,                      0, 0, 0.09, 0, 0,                      0, 0, 0, 0.09, 0,                      0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),     Sigma_prop = 0.04   ),   nsim = 2500,   n = 500,   fo_appr = FALSE,   omega_expansion = 1.2,   f = predder )  # Run optimization result <- timedbobyqa(opts$pt, opts, examplomycin_aggregated) #> Iteration: 50 - NLL: -1842.696  #> Iteration: 100 - NLL: -1844.847  #> Iteration: 150 - NLL: -1845.222  #> Iteration: 200 - NLL: -1845.259  #> Iteration: 250 - NLL: -1845.269  #> Iteration: 300 - NLL: -1845.277  #> Iteration: 350 - NLL: -1845.286  #> Iteration: 400 - NLL: -1845.287  #> Iteration: 450 - NLL: -1845.288  #> Iteration: 500 - NLL: -1845.289  #> Iteration: 550 - NLL: -1845.289  #> Iteration: 600 - NLL: -1845.289  #> Iteration: 650 - NLL: -1845.29  #> Iteration: 700 - NLL: -1845.29  print(result) #> # A tibble: 708 × 4 #>    p             nll time                 iter #>    <list>      <dbl> <dttm>              <dbl> #>  1 <dbl [11]> -1840. 2025-10-27 14:07:33     1 #>  2 <dbl [11]> -1840. 2025-10-27 14:07:33     2 #>  3 <dbl [11]> -1840. 2025-10-27 14:07:33     3 #>  4 <dbl [11]> 14057. 2025-10-27 14:07:34     4 #>  5 <dbl [11]>  5029. 2025-10-27 14:07:34     5 #>  6 <dbl [11]>   227. 2025-10-27 14:07:34     6 #>  7 <dbl [11]>  -417. 2025-10-27 14:07:34     7 #>  8 <dbl [11]>  -413. 2025-10-27 14:07:34     8 #>  9 <dbl [11]> -1779. 2025-10-27 14:07:35     9 #> 10 <dbl [11]> -1800. 2025-10-27 14:07:35    10 #> # ℹ 698 more rows"},{"path":"https://vanhasseltlab.github.io/admr/news/index.html","id":"admr-020","dir":"Changelog","previous_headings":"","what":"admr 0.2.0","title":"admr 0.2.0","text":"Initial release admr package preprint submission Updated documentation vignettes Bug fixes performance improvements","code":""},{"path":"https://vanhasseltlab.github.io/admr/news/index.html","id":"admr-010","dir":"Changelog","previous_headings":"","what":"admr 0.1.0","title":"admr 0.1.0","text":"Initial Github submission.","code":""}]

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timedIRMC.R
\name{timedIRMC}
\alias{timedIRMC}
\title{Fit aggregate data using Iterative Reweighting with Monte Carlo updates}
\usage{
timedIRMC(init, opts, obs, maxiter = 100, convcrit_nll = 5e-04, nomap = TRUE)
}
\arguments{
\item{init}{Initial parameter values for optimization. These should be transformed parameters
as generated by \code{opts$pt}.}

\item{opts}{A list of model options generated by \code{genopts()}. Contains settings for the model,
including the prediction function, time points, parameter structure, and simulation
settings.}

\item{obs}{Observed data in aggregate form (mean and covariance) or as a matrix of raw data.}

\item{maxiter}{Maximum number of iterations for the optimization algorithm. Default is 100.}

\item{convcrit_nll}{Convergence criterion for the negative log-likelihood. The algorithm stops
when the relative change in negative log-likelihood is less than this value.
Default is 5e-04.}

\item{nomap}{Logical indicating whether to use multiple models (FALSE) or a single model (TRUE).
Default is TRUE.}
}
\value{
A data frame containing:
\itemize{
\item \code{p}: List of parameter estimates for each iteration
\item \code{nll}: Negative log-likelihood values
\item \code{time}: Computation time for each iteration
\item \code{iter}: Iteration number
}
}
\description{
\code{timedIRMC} implements the Iterative Reweighting (IRMC) algorithm for parameter estimation of
aggregate data models, iterating over maximum likelihood updates with weighted Monte Carlo
updates. This function is used to compare the performance of different implementations of
aggregate data modeling.
}
\details{
The function uses the Iterative Reweighting algorithm with Monte Carlo sampling for optimization.
At each iteration, it generates Monte Carlo samples and updates the parameter estimates using
weighted importance sampling. The algorithm continues until convergence or until the maximum
number of iterations is reached.
}
\examples{
# Load required libraries
library(admr)
library(rxode2)
library(nlmixr2)
library(dplyr)
library(tidyr)
library(mnorm)

# Load and prepare data
data(examplomycin)
examplomycin_wide <- examplomycin \%>\%
  filter(EVID != 101) \%>\%
  dplyr::select(ID, TIME, DV) \%>\%
  pivot_wider(names_from = TIME, values_from = DV) \%>\%
  dplyr::select(-c(1))

# Create aggregated data
examplomycin_aggregated <- examplomycin_wide \%>\%
  admr::meancov()

# Define RxODE model
rxModel <- RxODE({
  cp = linCmt(
    cl,           # Clearance
    v1,           # Volume of the central compartment
    v2,           # Volume of the peripheral compartment
    q,            # Inter-compartmental clearance
    ka            # Absorption rate constant
  )
})

# Define prediction function
predder <- function(time, theta_i, dose = 100) {
  n_individuals <- nrow(theta_i)
  if (is.null(n_individuals)) n_individuals <- 1
  
  ev <- eventTable(amount.units="mg", time.units="hours")
  ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)
  ev$add.sampling(time)
  
  out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)
  cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),
                      byrow = TRUE)
  return(cp_matrix)
}

# Create options
opts <- genopts(
  time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),
  p = list(
    beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),
    Omega = matrix(c(0.09, 0, 0, 0, 0,
                     0, 0.09, 0, 0, 0,
                     0, 0, 0.09, 0, 0,
                     0, 0, 0, 0.09, 0,
                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),
    Sigma_prop = 0.04
  ),
  nsim = 2500,
  n = 500,
  fo_appr = FALSE,
  omega_expansion = 1.2,
  f = predder
)

# Run optimization
result <- timedIRMC(opts$pt, opts, examplomycin_aggregated)
print(result)

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_pop_EV.R
\name{gen_pop_EV}
\alias{gen_pop_EV}
\title{Compute expected population-level mean and covariance}
\usage{
gen_pop_EV(opts)
}
\arguments{
\item{opts}{A list of model options generated by \code{genopts()}. Contains settings for the model,
including the prediction function, time points, parameter structure, and simulation
settings.}
}
\value{
A list containing:
\itemize{
\item \code{E}: Expected mean of the model predictions
\item \code{V}: Expected covariance of the model predictions
}
}
\description{
\code{gen_pop_EV} computes the expected population-level mean and covariance of the model predictions
using either first-order approximation (FO) or Monte Carlo (MC) methods. The function is a core
component of the aggregate data modeling framework, used to generate expected values for model
fitting and optimization.
}
\details{
The function uses two different approaches to compute the expected values:
\itemize{
\item First-order approximation (FO): Used when \code{opts$fo_appr} is TRUE. This method:
\itemize{
\item Generates random effects using \code{gen_bi()}
\item Computes importance sampling weights
\item Uses FOCE approximation for each individual
\item Combines results using weighted averaging
}
\item Monte Carlo approximation (MC): Used when \code{opts$fo_appr} is FALSE. This method:
\itemize{
\item Generates random effects
\item Computes individual predictions
\item Uses weighted averaging when omega expansion is used
}
}

The choice between FO and MC methods depends on the number of Monte Carlo samples (\code{nsim}).
FO is used by default when \code{nsim < 10}, while MC is used otherwise.
}
\examples{
# Create test data
test_data <- create_test_data()
opts <- test_data$opts

# Compute expected values using FO approximation
opts$fo_appr <- TRUE
ev_fo <- gen_pop_EV(opts)
expect_named(ev_fo, c("E", "V"))

# Compute expected values using MC approximation
opts$fo_appr <- FALSE
ev_mc <- gen_pop_EV(opts)
expect_named(ev_mc, c("E", "V"))

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_pop_EV.R
\name{gen_pop_EV}
\alias{gen_pop_EV}
\title{Compute expected population-level mean and covariance}
\usage{
gen_pop_EV(opts)
}
\arguments{
\item{opts}{A list of model options generated by \code{genopts()}. Contains settings for the model,
including:
\itemize{
\item Prediction function (f)
\item Time points for prediction
\item Population parameters (beta)
\item Between-subject variability (Omega)
\item Method selection (fo_appr)
\item Number of Monte Carlo samples (nsim)
\item Omega expansion factor
}}
}
\value{
A list containing:
\itemize{
\item \code{E}: Expected mean of the model predictions at each time point
\item \code{V}: Expected covariance matrix of the predictions across time points
}
}
\description{
\code{gen_pop_EV} computes the expected population-level mean and covariance of the model predictions
using either first-order approximation (FO) or Monte Carlo (MC) methods. The function is a core
component of the aggregate data modeling framework, used to generate expected values for model
fitting and optimization.
}
\details{
The function implements two methods for computing population expectations:
\enumerate{
\item First-Order (FO) Approximation (when opts$fo_appr is TRUE):
\itemize{
\item Uses linearization around the random effects (η)
\item Steps:
a. Generate random effects samples
b. Compute importance sampling weights based on η distribution
c. For each individual:
\itemize{
\item Compute FOCE approximation of mean and covariance
\item Apply importance sampling weights
d. Combine weighted results across individuals
}
\item Advantages:
\itemize{
\item Computationally efficient for complex models
\item Good accuracy for nearly linear systems
}
\item Used when:
\itemize{
\item Number of Monte Carlo samples is small (nsim < 10)
\item Model is approximately linear in random effects
}
}
\item Monte Carlo (MC) Approximation (when opts$fo_appr is FALSE):
\itemize{
\item Uses direct simulation to estimate expectations
\item Steps:
a. Generate random effects samples
b. Compute full model predictions for each sample
c. Calculate empirical mean and covariance
d. Apply importance sampling if omega expansion is used
\item Advantages:
\itemize{
\item No linearization assumptions
\item More accurate for highly nonlinear models
}
\item Used when:
\itemize{
\item Sufficient Monte Carlo samples available
\item High accuracy required
\item Model is highly nonlinear
}
}
}

The choice between methods depends on:
\itemize{
\item Model complexity and nonlinearity
\item Required accuracy
\item Computational resources
\item Number of available Monte Carlo samples
}
}
\examples{

# Load required libraries
library(admr)
library(rxode2)
library(nlmixr2)
library(dplyr)
library(tidyr)
library(mnorm)


# Define RxODE model
rxModel <- function(){
model({
  # Parameters
  ke = cl / v1             # Elimination rate constant
  k12 = q / v1             # Rate constant for central to peripheral transfer
  k21 = q / v2             # Rate constant for peripheral to central transfer

  # Differential equations
  d/dt(depot)    = -ka * depot
  d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral
  d/dt(peripheral) = k12 * central - k21 * peripheral

  # Concentration in central compartment
  cp = central / v1
})
}

rxModel <- rxode2(rxModel)
rxModel <- rxModel$simulationModel

# Define prediction function for a two-compartment model
predder <- function(time, theta_i, dose = 100) {
  n_individuals <- nrow(theta_i)
  if (is.null(n_individuals)) n_individuals <- 1

  # Create event table for dosing and sampling
  ev <- eventTable(amount.units="mg", time.units="hours")
  ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)
  ev$add.sampling(time)

  # Solve ODE system
  out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)

  # Return matrix of predictions
  matrix(out$cp, nrow = n_individuals, ncol = length(time), byrow = TRUE)
}

# Create options for a two-compartment model
opts <- genopts(
  f = predder,
  time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),
  p = list(
    # Population parameters (fixed effects)
    beta = c(cl = 5,    # Clearance (L/h)
            v1 = 10,    # Central volume (L)
            v2 = 30,    # Peripheral volume (L)
            q = 10,     # Inter-compartmental clearance (L/h)
            ka = 1),    # Absorption rate (1/h)

    # Between-subject variability (30\% CV on all parameters)
    Omega = matrix(c(0.09, 0, 0, 0, 0,
                    0, 0.09, 0, 0, 0,
                    0, 0, 0.09, 0, 0,
                    0, 0, 0, 0.09, 0,
                    0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),

    # Residual error (30\% CV)
    Sigma_prop = 0.04
  ),
  nsim = 2500,  # Number of Monte Carlo samples
  n = 2500,      # Number of individuals
  fo_appr = FALSE  # Use Monte Carlo approximation
)

# Generate population expectations
ev <- gen_pop_EV(opts)

}

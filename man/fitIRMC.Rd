% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitIRMC.R
\name{fitIRMC}
\alias{fitIRMC}
\title{Fit aggregate data using Iterative Reweighting with Monte Carlo updates}
\usage{
fitIRMC(
  opts,
  obs,
  maxiter = 100,
  convcrit_nll = 1e-05,
  single_dataframe = TRUE,
  phase_fractions = c(0.2, 0.4, 0.2, 0.2),
  max_worse_iterations = 10,
  chains = 1,
  perturbation = 0.1,
  seed = 1
)
}
\arguments{
\item{opts}{A list of model options generated by \code{genopts()}. Contains settings for the model,
including the prediction function, time points, parameter structure, and simulation
settings.}

\item{obs}{Observed data in aggregate form (mean and covariance) or as a matrix of raw data.}

\item{maxiter}{Maximum number of iterations for the optimization algorithm. Default is 100.}

\item{convcrit_nll}{Convergence criterion for the negative log-likelihood. The algorithm stops
when the relative change in negative log-likelihood is less than this value.
Default is 1e-05.}

\item{single_dataframe}{Logical indicating whether to use a single data frame (TRUE) or multiple
data frames (FALSE). Default is TRUE.}

\item{phase_fractions}{Vector of fractions for each optimization phase. The sum should be 1.
Default is c(0.2, 0.4, 0.2, 0.2).}

\item{max_worse_iterations}{Maximum number of consecutive worse iterations before skipping a phase.
Default is 10.}

\item{chains}{Number of chains to run. Default is 1.}

\item{perturbation}{Perturbation factor for the initial parameter values of each chain.
Default is 0.1.}

\item{seed}{Random seed for reproducibility. Default is 1.}
}
\value{
An object of class \code{fit_admr_result} containing:
\itemize{
\item \code{p}: List of parameter estimates for each iteration
\item \code{nll}: Negative log-likelihood values
\item \code{time}: Computation time for each iteration
\item \code{iter}: Iteration number
\item \code{chain}: Chain number (if multiple chains are used)
\item \code{phase}: Optimization phase number
}
}
\description{
\code{fitIRMC} implements the Iterative Reweighting (IRMC) algorithm for parameter estimation of
aggregate data models, iterating over maximum likelihood updates with weighted Monte Carlo
updates. This function uses nloptr instead of optimx for optimization and includes additional
features like multiple chains and phase-based optimization.
}
\details{
The function uses the Iterative Reweighting algorithm with Monte Carlo sampling for optimization.
It includes several advanced features:
\itemize{
\item Multiple optimization phases with different convergence criteria
\item Chains with perturbed starting values
\item Phase-based optimization with automatic phase skipping
\item Convergence checking based on both likelihood and parameter stationarity
}

The optimization process is divided into phases, each with its own convergence criteria and
settings. The algorithm can automatically skip phases if the optimization is not progressing.
}
\examples{
# Load required libraries
library(admr)
library(rxode2)
library(nlmixr2)
library(dplyr)
library(tidyr)
library(mnorm)

# Load and prepare data
data(examplomycin)
examplomycin_wide <- examplomycin \%>\%
  filter(EVID != 101) \%>\%
  dplyr::select(ID, TIME, DV) \%>\%
  pivot_wider(names_from = TIME, values_from = DV) \%>\%
  dplyr::select(-c(1))

# Create aggregated data
examplomycin_aggregated <- examplomycin_wide \%>\%
  admr::meancov()

# Define RxODE model
rxModel <- function(){
model({
  # Parameters
  ke = cl / v1             # Elimination rate constant
  k12 = q / v1             # Rate constant for central to peripheral transfer
  k21 = q / v2             # Rate constant for peripheral to central transfer

  # Differential equations
  d/dt(depot)    = -ka * depot
  d/dt(central)  = ka * depot - ke * central - k12 * central + k21 * peripheral
  d/dt(peripheral) = k12 * central - k21 * peripheral

  # Concentration in central compartment
  cp = central / v1
})
}

rxModel <- rxode2(rxModel)
rxModel <- rxModel$simulationModel


# Define prediction function
predder <- function(time, theta_i, dose = 100) {
  n_individuals <- nrow(theta_i)
  if (is.null(n_individuals)) n_individuals <- 1

  ev <- eventTable(amount.units="mg", time.units="hours")
  ev$add.dosing(dose = dose, nbr.doses = 1, start.time = 0)
  ev$add.sampling(time)

  out <- rxSolve(rxModel, params = theta_i, events = ev, cores = 0)
  cp_matrix <- matrix(out$cp, nrow = n_individuals, ncol = length(time),
                      byrow = TRUE)
  return(cp_matrix)
}

# Create options
opts <- genopts(
  time = c(.1, .25, .5, 1, 2, 3, 5, 8, 12),
  p = list(
    beta = c(cl = 5, v1 = 10, v2 = 30, q = 10, ka = 1),
    Omega = matrix(c(0.09, 0, 0, 0, 0,
                     0, 0.09, 0, 0, 0,
                     0, 0, 0.09, 0, 0,
                     0, 0, 0, 0.09, 0,
                     0, 0, 0, 0, 0.09), nrow = 5, ncol = 5),
    Sigma_prop = 0.04
  ),
  nsim = 2500,
  n = 500,
  fo_appr = FALSE,
  omega_expansion = 1,
  f = predder
)

# Run optimization
result <- fitIRMC(opts, examplomycin_aggregated)
print(result)

}
